[{"id":0,"href":"/docs/tools/teddycloud/setup/dump-certs/","title":"Dump certificates","section":"Setup","content":" Dump Certificates # Generate certificates # On first run teddyCloud will generate the CA and certificates with the starting date 2015-11-03. Those will be placed in /certs/server/. This also generates the replacement CA for the toniebox certs/server/ca.der.\nDump certificates of your toniebox # You\u0026rsquo;ll need the flash:/cert/ca.der (Boxine CA), flash:/cert/client.der (Client Cert) and flash:/cert/private.der (Client private key). Place those files under /certs/client/*. You can either power the box with the battery (be sure it is not empty) or with the power supply. (recommended)\nKeep a backup of the certificates, especially the client.der and private.der. Without it you won\u0026rsquo;t be able to connect to the cloud anymore!\nDevice specific # To be able to dump the certificates, you need to open the toniebox. Instructions for that can be found on iFixit. As the dumping process is different for each type of box, continue with the device specific step for your device:\nCC3200 CC3235 ESP32 "},{"id":1,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/","title":"HackieboxNG Bootloader","section":"CC3200","content":" HackieboxNG Custom Bootloader for CC3200 # Introduction # HackieboxNG is the next generation bootloader for your cc3200 based toniebox!\nHackieboxNG SD bootloader # The HackieboxNG SD bootloader consists of two stages. The first stage is a sd bootloader which is called preload. This preloader then runs the stage two bootloader from microSD. This is the bootloader itself that allows selecting + running different firmwares.\nFeatures # Nine firmware slots Loading any CC3200 standard firmware Loading the original firmware directly Simulate the OFW bootloaders behaviour Patching binaries in memory for ex. domain name changes for teddyCloud , enable SLIX tags or disable charger wakeup (more) Highly configurable via json files Installation # Please take a look into the wiki\nLinks # GitHub Releases "},{"id":2,"href":"/docs/how-to-get-started/","title":"How to get started?","section":"Docs","content":" How to get started? # Let\u0026rsquo;s start from zero. You have just bought a brand new Toniebox or you just found your way to this website.\nThere are two paths you might choose from to get more out of your Toniebox.\nThe easy way (techless) # You may already know creative tonies. This is the Tonies way to get your own content onto the box. We offer you an alternative way to replace all content on your Toniebox without the 90 minute or creative tonie only limit. You\u0026rsquo;ll need to remove the microSD from your Box and put it into your computer. With our software teddyBench you can edit the content on it. If you like you may also buy cheap SLIX-L Tags, assign your very own content to it with teddyBench and design your own figurines or even create them together with your children.\nIf you need some more detailed steps you may check out the Ultimate Noob Guide in our forum.\nThe complex way (tech-savy) # If Docker, DNS, MQTT and Flash are no new words for you, you may go a step further. With the open-source server teddyCloud you can run your own toniebox cloud. This allows you to serve your own content to the box over the air and you can also download the original content from the original cloud. For that you\u0026rsquo;ll need to download and replace the certificates on the toniebox\u0026rsquo; flash memory.\nIf you want to start straight ahead and own a v4 Toniebox (so based on ESP32) you may shortcut to Teddycloud ESP32 newbie documentation in our forum. For the other box versions and more technical details, just have a look here teddyCloud.\n"},{"id":3,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/install/","title":"Installation","section":"HackieboxNG Bootloader","content":" HackieboxNG Installation # Backup # Please make a full file based + flash backup of your toniebox\u0026rsquo;s flash with cc3200tool. More details on the usage of the cc3200tool and the required hardware can be found here Python 3 is needed! You may use a different COM port or the right device on linux ex. /dev/ttyUSB0.\ncc3200tool -p COM3 read_all_files targetdir/ read_flash backup.bin Please check, if you dumped every important file.\nHackieboxNG Bootloader # Get the bootloader # Download the latest version from here. Please unzip the release to your desired directory. You will find a directory called flash there for the file(s) that need to be copied to the flash and a directory called sd for the sd files. If you don\u0026rsquo;t mind a slightly slower boot but want some log output via UART (Baud 921600, TX Pin) use the debug variant (check the ngCfg.json to enable it!).\nPreface # Installing the new bootloader is split into two stages and differs whether it\u0026rsquo;s a first install or and update to an existing installation:\nStage 1: Install the preloader 1a) First time installation 1b) Existing installation Stage 2: Install the bootloader Stage 1a: Preloader, first time installation # Move original bootloader # First of all you need to copy your just backuped original mcuimg.bin (original bootloader) from your toniebox to a different location (flash:/sys/pre-img.bin) to boot it with the HackieboxNG Bootloader later on. Please don\u0026rsquo;t confuse the mcuimg.bin (ofw bootloader) you are going to dump with the mcuimg.bin within the hackiebox zip package. (/flash/sys/mcuimg.bin)\ncc3200tool -p COM3 read_file /sys/mcuimg.bin mcuimg.bin cc3200tool -p COM3 write_file mcuimg.bin /sys/pre-img.bin Install preloader # cc3200tool -p COM3 write_file flash/sys/mcuimg.bin /sys/mcuimg.bin Or as oneliner # cc3200tool -p COM3 read_file /sys/mcuimg.bin mcuimg.bin write_file mcuimg.bin /sys/pre-img.bin write_file flash/sys/mcuimg.bin /sys/mcuimg.bin Dumping the original firmware (optional) # The box saves up to 3 different versions of the OFW. It can be found flash:/sys/mcuimgN.bin (replace N with 1, 2 or 3). A command to dump all three versions would be:\ncc3200tool -p COM3 read_file /sys/mcuimg1.bin mcuimg1.bin read_file /sys/mcuimg2.bin mcuimg2.bin read_file /sys/mcuimg3.bin mcuimg3.bin To check which version the dumped firmwares are you may just open it with a hex editor (quite at the end) or use our python tool to extract it. If you found a new firmware, let us know by opening a push request for our known firmware listing in the wiki.\nPreloader installation finished # You\u0026rsquo;ve installed the Preloader onto the Toniebox. Please continue with Stage 2: Installing the bootloader onto the SD card.\nStage 1b: Preloader, updating existing installation # You may use the (old) Hackiebox CFW to upload the preloader. This way you can install it over the air without direct access to the flash if you have already installed a previous version of the cfw bootloader/preloader. Just run the Hackiebox CFW and use the webinterface to upload the new /sys/mcuimg.bin.\nBackup # To verify that you have currently installed the ofw bootloader to /sys/pre-img.bin you may download the file from flash\nhttp://*.*.*.*/api/ajax?cmd=get-flash-file\u0026amp;filepath=/sys/pre-img.bin Copy over preloader # Select Target \u0026ldquo;Flash\u0026rdquo; Select Local file \u0026ldquo;flash/sys/mcuimg.bin\u0026rdquo; Set Overwrite to \u0026ldquo;on\u0026rdquo; Set SD/Flash path to \u0026ldquo;/sys/mcuimg.bin\u0026rdquo; Press Upload! Verification # To verify that the upload was successful you can download the mcuimg.bin from flash afterwards and compare it with the flash/sys/mcuimg.bin you have just uploaded.\nhttp://*.*.*.*/api/ajax?cmd=get-flash-file\u0026amp;filepath=/sys/mcuimg.bin Stage 2: Installing the Bootloader # SD files # Copy over all the contents of the sd folder to the sd card of the toniebox. Copy over the original bootloader (mcuimg.bin from your backup) to the first ofw slot sd:/revvox/boot/ng-ofw1.bin. Now the HackieboxNG bootloader will instantly boot the original bootloader and run the original firmware.\nNote: The preloader will load any file placed to sd:/revvox/boot/ngbootloader.bin.\nMore about the different firmware slots and the configuration here.\n"},{"id":4,"href":"/docs/rules/","title":"Community Guidelines","section":"Docs","content":" Rules for our Chats and Forums - Community Guidelines # Do\u0026rsquo;s # §1. Be respectful # Treat others with kindness and respect.\n§2. Complex questions # For in-depth inquiries, please use our Forum.\n§3. Stay on topic # This community is focused on Toniebox-related discussions.\n§4. Use English # To ensure everyone can participate, please stick to English. Messages in other languages are deleted without comment.\nDon\u0026rsquo;ts # §5. No piracy # Any requests or discussions related to piracy will result in an immediate ban.\n§6. No team tagging # Don\u0026rsquo;t tag the team for general questions. Replying is totally ok if we are already in the discussion.\n§7. No general hacking # This is not a community for general hacking. Questions like \u0026ldquo;Can you hack Instagram?\u0026rdquo; or \u0026ldquo;How to crack Candy Crush?\u0026rdquo; result in a ban.\n§8. No self-promotion without permission # If you\u0026rsquo;re a merchant, clearly identify yourself and ask permission before sharing links to your products.\n§9. Posting the same question in multiple places # Please stick to the Forum if you started there. Scattering the answers in Telegram and Discource will make it hard for others to find the solution.\n§10. No kidnapping of solved threads # If you find a thread in our Forum that seems to be solved, don\u0026rsquo;t hijack it for your problem. It may look similar, but this will end up in chaos. Open your own thread!\nHelpful Tips # Use the search function before asking a question Be patient when waiting for responses Share your knowledge to help others Telegram # Please follow the Miss Rose Bots instructions. If you don\u0026rsquo;t do that, you are unable to write. Then please leave our Telegram Group and rejoin it.\nMore # Feel free to refine this document with a PR!\n"},{"id":5,"href":"/docs/faq/","title":"Frequently Asked Questions","section":"Docs","content":" FAQ # Is there a way to find out which kind of box I have\u0026hellip; # \u0026hellip; on the outside of the packaging? # by made in X # On the bottom of the box you can find if the box was made in china or hungary. Those from china are likely an ESP32 based box (01/2024).\nby serial # The serial number just indictates when (year + week) and on which production line it was produced. As there a still boxes produces with CC3200 and CC3235 chips, you may also get them, beside a ESP32 based one, if you buy a recent one. Tonies even reuses old pcbs for new boxes.\n\u0026hellip; on the outside of the toniebox itself (by mac)? # If the box has a MAC on its cap, you may check if its a ESP32 based one or not. You may use macvendors for that. Boxes without a MAC are most likely a CC3200 based one, as the MAC wasn\u0026rsquo;t printed onto the CAP at the beginning.\nWhat kind of box should I get? # There are three different MCUs used. The CC3200 (v1/v2), the CC3235 (v3) and the ESP32 (v4). The CC3200 based box has the custom bootloader HackieboxNG and the custom PoC firmware Hackiebox available, but for the future we recommend the ESP32 based box.\n"},{"id":6,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/bootloader/","title":"Bootloader","section":"HackieboxNG Bootloader","content":" HackieboxNG SD bootloader # The HackieboxNG SD bootloader consists of two bootloaders (called stages). Both stages share the same codebase and are relocated to 0x20038000 before run.\nPreloader (Stage 1) # The preloader runs a fixed file from the sd card (sd:/revvox/boot/ngbootloader.bin) without any checks. An update for shouldn\u0026rsquo;t be necesarry in the future. It should be installed as primary bootloader for HackieboxNG to flash:/sys/mcuimg.bin.\nAll error codes for the preloader are in blue.\nBootloader (Stage 2) # When no ear is pressed, the bootloader loads the selected standard bootslot. If you hold and keep the big ear pressed while booting you may select a different slot by pressing the small ear for a short moment. Then release the big ear to boot. Only slots with a file on the sd card can be selected. You may use them in a different way and change the settings within the configuration. The selected slot is indicated by 1-3 blinks in a color assigned to each group. Following slots are available:\nFilepath: sd:/revvox/boot/ng-XXXY.bin\nGreen group - Original firmware # ofw1 - OFW bootloader from flash:/sys/pre-img.bin recommended here (as a backup) ofw2 - simulate OFW behaviour and load the same image like the OFW would, but with patches ofw3 - specific OFW file with patches (optional) Blue group - Custom firmware # cfw1 - Primary firmware (optional) cfw2 - Backup firmware (optional) cfw3 - (optional) Cyan group - Additonal firmwares # add1 - (optional) add2 - (optional) add3 - (optional) Additional # The first two slots ofw1 and ofw2 are special, as they do not boot from microSD. Slot ofw1 boots from flash:/sys/pre-img.bin and slot ofw2 simulates the ofw bootloader, but allows patching. If you want to run a patched OFW using ofw2 is recommended. As standard ofw1 is set and booted. Change activeImg to ofw2 if you want to boot ofw2 on startup. If slot ofw1 is not selectable, writing flash:/sys/pre-img.bin may have failed.\nAll error codes for the bootloader are in green.\nConfiguration # The configuration for the bootloader is saved within sd:/revvox/boot/ngCfg.json. All sections or keys starting with an underscore \u0026ldquo;_\u0026rdquo; are comments and will be ignored.\nGeneral Section # Key Description Values Default activeImg Sets the firmware slot to select at startup ofw1, ofw2, ofw3, cfw1, cfw2, cfw3, add1, add2, add3 ofw1 waitForPress Waits for an earpress on startup with a blink sequence (blue, green, cyan, black) true, false false waitForBoot Waits for an earpress on before firmware boot with a blink sequence (blue, green, cyan, black) true, false false waitTimeoutInS Timeout in seconds for waitForPress if no earpress (hibernation) 1-255 60 minBatteryLevel Poweroff voltage to protect the battery. Divide through 2785 to get voltage (Standard 3.18V) 8869 ofwFixValue Magic bytes to be placed into the OFW Image during boot (can be extracted from OFW BL data[-8:-4]) hex array with 4 bytes [\u0026ldquo;4C\u0026rdquo;, \u0026ldquo;01\u0026rdquo;, \u0026ldquo;10\u0026rdquo;, \u0026ldquo;00\u0026rdquo;] ofwFixFlash Magic bytes read from the ofw bootloader on flash ex. /sys/pre-img.bin serialLog Enable log to UART (TX) @921600 baud. Only works for debug build! true, false true logLevel Set Log level 0:Trace - 5:Fatal 0-5 DEBUG_LOG_LEVEL logColor Enable colored log true, false false Firmware Section # There are nine firmware slots, named ofw1, ofw2, ofw3, cfw1, cfw2, cfw3, add1, add2 and add3.\nKey Description Values Default checkHash Check hash of firmware true, false true hashFile Chech hash from ng-XXX?.sha file (true) or from the last 64 byte of the firmware itself (ofw) true, false false watchdog Keep watchdog enabled when booting firmware (if booting fails, box will restart) true, false false ofwFix Add magic bytes to the firmware image to make ofw directly boot true, false false ofwSimBL Read image to boot from flash:/sys/mcubootinfo.bin and load the image from flash:/sys/mcuimgN.bin instead of reading from sd (like the ofw bootloader) true, false false bootFlashImg Read firmware from file on flash true, false false flashImg Path to the file on flash ex. /sys/pre-img.bin patches List of patches to load, see patch directory or patch wiki [\u0026ldquo;noCerts.305\u0026rdquo;, \u0026ldquo;noPass3.305\u0026rdquo;] [] SHA256 check # For each slot an SHA256 check is available. Either as a seperated ng-XXXY.sha file or directly appended to the binary\nFor example all OFW binaries have a SHA256 appended to their file ending (except the ofw bootloader). A fitting ng-ofw1.sha is provided for the ofw bootloader. The older Hackiebox CFW doesn\u0026rsquo;t have a SHA256 appened. So you may need to create ng-cfwX.sha yourself if you want to use it. For HackieboxNG the SHA256 hash will be directly appended to the firmware file itself.\nWindows # Command: Get-Filehash FILENAME.BIN -Algorithm SHA256\nLinux # Command: shasum256 FILENAME.BIN\nPatches # The integrated patch engine allows to apply patches to the loaded firmware in-memory. Currently just a simple dup2 patcher style Search \u0026amp; Replace engine ist implemented. You may patch up to 256 bytes per patch and apply up to 32 patches per slot. The patchname is limited to 32 characters. More about available ofw patches\nError codes # If the bootloader detects a problem, it blinks in a defined pattern. The preloader on the flash blinks blue, the bootloader on the sd blinks green.\nSD related codes # If a sd related problem occurs, the box combines two patterns. The first one indicates where the problem roughly occured. The second one gives you more information about it.\nFirst pattern # SD not found - 2x500ms, wait 500ms # Please check if the sd is placed in the holder correctly and the sd is okay. The OFW will blink in red and shut off.\nFile could not be opened - 3x500ms, wait 2000ms # Problem opening the firmware file\nFile could not be read - 4x500ms, wait 2000ms # Problem reading the firmware file\nSecond pattern (X times 1000ms) # FR_DISK_ERR, /* (1) A hard error occurred in the low level disk I/O layer */ FR_INT_ERR, /* (2) Assertion failed */ FR_NOT_READY, /* (3) The physical drive cannot work */ FR_NO_FILE, /* (4) Could not find the file */ FR_NO_PATH, /* (5) Could not find the path */ FR_INVALID_NAME, /* (6) The path name format is invalid */ FR_DENIED, /* (7) Access denied due to prohibited access or directory full */ FR_EXIST, /* (8) Access denied due to prohibited access */ FR_INVALID_OBJECT, /* (9) The file/directory object is invalid */ FR_WRITE_PROTECTED, /* (10) The physical drive is write protected */ FR_INVALID_DRIVE, /* (11) The logical drive number is invalid */ FR_NOT_ENABLED, /* (12) The volume has no work area */ FR_NO_FILESYSTEM, /* (13) There is no valid FAT volume */ FR_MKFS_ABORTED, /* (14) The f_mkfs() aborted due to any problem */ FR_TIMEOUT, /* (15) Could not get a grant to access the volume within defined period */ FR_LOCKED, /* (16) The operation is rejected according to the file sharing policy */ FR_NOT_ENOUGH_CORE, /* (17) LFN working buffer could not be allocated */ FR_TOO_MANY_OPEN_FILES, /* (18) Number of open files \u0026gt; _FS_LOCK */ FR_INVALID_PARAMETER /* (19) Given parameter is invalid */ Other # Battery Low - 2x66ms, 2x133ms, 2x66ms # Battery is low. Value is under the minimum defined in minBatteryLevel. Box hibernates\nHash differs - 10x50ms # The actual hash of the firmware is different from the one defined in the firmware itself or in the hashfile (depens on the config). Checking the UART-output may help.\nWatchdog reset - 5x33ms, 5x66ms, 5x33ms # The watchdog reseted the box, because the box was in an unintended state or the firmware is broken.\nApplication error - 3x33ms, 3x66ms, 3x33ms # Application error. This shouldn\u0026rsquo;t happen.\n"},{"id":7,"href":"/docs/tools/teddycloud/setup/flash-ca/","title":"Flash replacement CA","section":"Setup","content":" Flash replacement CA # Device specific # Please continue with the device specific step for your device:\nCC3200 CC3235 ESP32 "},{"id":8,"href":"/docs/tools/teddycloud/setup/dns/","title":"DNS","section":"Setup","content":" DNS # Device specific # Please continue with the device specific step for your device:\nCC3200 CC3235 ESP32 "},{"id":9,"href":"/docs/custom-firmware/cc3200/hackieboxng-bl/ofw-patches/","title":"Firmware patches","section":"HackieboxNG Bootloader","content":" HackieboxNG original firmware patches # Preface # Every patch is written for one or more specific versions of the original firmware. Currently the latest version supported for all patches is EU_V3.1.0_BF2-0. An overview over all known firmware versions can be found in the toniebox wiki.\nOffline / Privacy # It is recommended to keep the toniebox offline if you are using a patched firmware. Using the offline mode is recommended. In addition you should enable the Null certificate patch.\nNull certificate Paths (noCerts.305.json) # This patch clears the paths to the certificates. This way the box will abort the https connection to boxine as it can\u0026rsquo;t check if the boxine server is a valid one.\nAlternative Tags (SLIX / SLIX2) # If you want to use alternative tags those patches will help you. Even other iso15693 tags may work.\nBlock count \u0026gt;8 (blockCheck.310.json / blockCheck.307.json) # Usally the toniebox checks if the tag has exactly 8 blocks. The check allows the tag to have more than that. (ex. SLIX or SLIX2)\nNo privacy password (noPass3.310.json / noPass3.305.json) # Usally doesn\u0026rsquo;t allow tags without the boxine specific or the NXP specific privacy mode password. With the patch you can use tags without having privacy password support (ex. SLIX). It disables the rf field for a moment when the second privacy password failed. This patch uses the new dynamic patching engine to generate dynamic arm asm bytecode.\nSecond privacy password to 00000000 (secondPwZero.305.json) # Usally doesn\u0026rsquo;t the toniebox checks for two passwords. The boxine specific and the NXP specific standard password 0f0f0f0f. This patch changes the second password to 00000000.\nNo UID check (uidCheck.307.json) # Usally the toniebox checks if the UID of the tag starts with E0:04:03. With that patch you may use tags with other UIDs (ex SLIX or SLIX2)\nHide A: Do not hide files that need new content (noHide.308.json) # You just need one of the hide patches! This one is recommended Usally the toniebox sets the file attribute hidden of the tonie file for all live tags or tags having new content. If the toniebox is online and the tag is placed on top it will delete that file to redownload its content. This also applies to all custom tags. This patch disabled the hide function. So the files won\u0026rsquo;t be deleted and redownloaded. Attention You won\u0026rsquo;t be able to update creative tonies anymore!\nHide B: Unhide files that should be hidden (because they have new content) (alwaysUnhide.308.json) # You just need one of the hide patches! Usally the toniebox sets the file attribute hidden of the tonie file for all live tags or tags having new content. If the toniebox is online and the tag is placed on top it will delete that file to redownload its content. This also applies to all custom tags. This patch replaces the hide functionality with unhide. So the files won\u0026rsquo;t be deleted and redownloaded. Attention You won\u0026rsquo;t be able to update creative tonies anymore!\nAdditional # Disable privacy mode (noPrivacy.310.json / noPrivacy.305.json) # Usally the toniebox puts every tag into privacy mode after reading it. This patch disables that, so you can easily read the UID with any standard iso15693 reader like your phone.\nLoad CA from c2.der (altCa.305.json) # To use two CAs you can use this patch. It will change the CA path from flash:/cert/ca.der to flash:/cert/c2.der\nChange Boxine URLs (altUrl.305.json) # Changes the Boxine Cloud URLs from prod.de.tbs.toys to prod.revvox and rtnl.bxcl.de to rtnl.revvox.\nDevelopment # Enable SWD (swd.json) # Handy patch to debug the OFW and to verify and test patches. Attenion, the red led won\u0026rsquo;t work with that patch enabled!\nDeprecated Patches # No privacy password (noPass.305.json) # Deprecated doesn\u0026rsquo;t reset the RF field so some tags will fail Usally doesn\u0026rsquo;t allow tags without the boxine specific or the NXP specific privacy mode password. With the patch you can use tags without having privacy password support (ex. SLIX).\nNo privacy password (noPass2.308.json) # Deprecated replaced with noPass3 Usally doesn\u0026rsquo;t allow tags without the boxine specific or the NXP specific privacy mode password. With the patch you can use tags without having privacy password support (ex. SLIX). It disables the rf field for a moment when the second privacy password failed.\nDisable charger wakeup (noChargWake.305.json) # The toniebox won\u0026rsquo;t wakeup anymore if it is put onto the charger. noChargWake.305 Doesn\u0026rsquo;t work on 3.1.0-BF2 and higher. Box won\u0026rsquo;t wakeup anymore Attention, this patch is only working if you disconnect the battery for a second before loading the patched ofw. If you start the unpatched ofw once, you will have to disconnect the battery again\nBlock count \u0026lt;=8 (blockCheckRemove.310.json / blockCheckRemove.308.json) # Usally the toniebox checks if the tag has exactly 8 blocks. The check allows the tag to have less than that.\nThis patch breaks the transfer of the authentication data to the cloud, this means downloading the content of the Tonies if using teddyCloud won\u0026rsquo;t work and those Tonies will be marked as no-cloud\n"},{"id":10,"href":"/docs/wiki/general/glossary/","title":"Glossary","section":"General","content":" Term Description boxine Boxine GmbH is the manufacturer of the Toniebox boxine cloud a server where your Toniebox downloads its contents from and logs every action freshness check long press one ear to sync with teddycloud or boxine cloud Hackiebox a custom firmware for your Toniebox (development discontinued) HackieboxNG a custom bootloader for your Toniebox TeddyBench is a tool to convert audio files to play on your Toniebox teddyCloud is a locally hosted server that replaces the boxine cloud Tonie the figurine that you place on the Toniebox Toniebox the beloved child’s audio player tonies Tonies SE is the brand that sells the Toniebox TAF Toniebox Audio File TAP Toniebox Audio Playlist "},{"id":11,"href":"/docs/wiki/general/audio-file-format/","title":"Audio file format","section":"General","content":" SD card structure # Every box contains a SD card which is used to store the tonies audio data.\ndownloaded audio files # The downloaded audio files for tonies are stored on the SD card in a directory for every tonie.\nDirectories are named by the last 4 bytes of the tonie ISO15693 UID in hex format, e.g. \\DEADBEEF. Within that folder there is a file named by the first 4 bytes of the UID. Both hex values represent the tag\u0026rsquo;s UID, but in reverse order.\nSo a tonie with the UID E00403500D0D3F47 has the audio content stored in the file \\CONTENT\\473F0D0D\\500304E0.\npredefined files # Upon initalization the box extracts the content of the flash-internal sfx.bin into two directories with several audio files:\n00000000\\000000* 00000001\\000000* Audio file format # In general the audio files are just OGG files with some custom header\nSo the files are structured like this:\n\u0026lt;file\u0026gt; ::= \u0026lt;header\u0026gt; \u0026lt;audio_data\u0026gt; \u0026lt;header\u0026gt; ::= \u0026lt;header_len\u0026gt; \u0026lt;header_data\u0026gt; where: \u0026lt;header_len\u0026gt; length of \u0026lt;header_data\u0026gt; in big endian uint32, usually 0x00000FFC \u0026lt;header_data\u0026gt; protobuf coded info fields like SHA1 hash, audio length, etc \u0026lt;audio_data\u0026gt; Ogg audio file Header format # The file header is coded using protobuf and contains these fields:\n1. [string] Audio data SHA-1 hash 2. [variant] Audio data length in bytes 3. [variant] Audio-ID of OGG audio file, which is the unix time stamp of file creation 4. [string] [array of variant] Ogg page numbers for Chapters 5. [string] fill bytes „00“ up to \u0026lt;header_len\u0026gt; To decode the protobuf content, you can use the online decoder at https://protogen.marcgravell.com/decode\nEncoding is a bit more tricky, as the tested encoder did not produce the correct data for the 4th field. Here the protobuf field type should be \u0026ldquo;string\u0026rdquo; and the content should be an array of multiple variants. One variant coded page number for every chapter in the file, starting with a zero for the first chapter.\nThe encoder produced either multiple variant fields with the same field number, or the correct string field except for files with only one chapter where it generated only a variant field. Long story short, the best choice was to build a custom protobuf encoder.\nAudio data # The container format for the audio data is Ogg, which packetizes the data into so called \u0026ldquo;pages\u0026rdquo;. Pages contain metadata like the time granule (timestamp) for playback, sequence number, checksum etc. and the real audio data in segments within the page. See https://en.wikipedia.org/wiki/Ogg_page\nThe tonie files are encoded using an opus coder with around 96-116 kbps in VBR mode. (opus header say 96 kbps) The encoder was set up to produce Ogg pages that perfectly fit into a 4k (0x1000) byte sized page. As the box seems to read the data from SD into a 4k byte sized buffer, pages are only allowed to start at 4k-boundaries and must end at the end of the page. Pages can not cross the 4k boundary, else the file is treaten as invalid and gets re-downloaded.\nThere is no (to me known) way of \u0026ldquo;padding\u0026rdquo; data in a page so that the box would accept the data as valid. Thus the encoder must be configured in CBR mode with a certain bit rate, such that Ogg page header plus segments build up 4k sized blocks starting at 4k-offsets and ending at 4k-offsets. For sure there is a way to tell the opus coder \u0026ldquo;now please produce a segment with n bytes\u0026rdquo; which can be used to fill up the page until it\u0026rsquo;s 4k end. But the in experiments used encoder did not have an obvious feature to do this.\nWe have developed a tool called teddy to encode and decode these files.\nAudio file extraction with Linux OS # Remove Header of the file with ´dd bs=4096 skip=1 if=500304E0 of=trim.ogg´ then just use ffmpeg to convert it into mp3 ´ffmpeg -i trim.ogg done.mp3´ Audio file extraction with Windows # Remove Header of the file with: powershell -Command \u0026ldquo;$in = [System.IO.File]::OpenRead(\u0026lsquo;00000000\u0026rsquo;); $out = [System.IO.File]::Create(\u0026rsquo;trim.ogg\u0026rsquo;); $in.Seek(4096, \u0026lsquo;Begin\u0026rsquo;) | Out-Null; $in.CopyTo($out); $in.Close(); $out.Close()\u0026rdquo; then just as in Linux use ffmpeg to convert it into mp3: ffmpeg -i \u0026ldquo;trim.ogg\u0026rdquo; -ar 44100 -ac 2 -b:a 96k -f mp3 -c:a libmp3lame \u0026ldquo;done.mp3\u0026rdquo; "},{"id":12,"href":"/docs/wiki/general/battery-power-supply/","title":"Battery \u0026 Power supply","section":"General","content":" Battery # Voltage: 3.6V Chemistry: NiMH Cells: 3 Size: AA NTC (Thermistor) white cable # 22°C - 10kOhm 35°C - 6kOhm 5°C - 30kOhm MF58 10kOhm 3950K (Confirmed by Boxine) Plug # JST PH 2mm 3pin Cable Length for custom battery packs # Black: 17cm Red: 15cm White: 15cm ADC Voltage Map # Box ID User voltage in V ADC raw charging original battery notes B-Dev Blue SciLor 3.975 2701 0 1 B-Dev Blue SciLor 4.16 2824 0 1 B-Dev Blue SciLor 4.25 2882 0 1 Max B-Dev Blue SciLor 4.39 3188 1 1 B-Dev Blue SciLor 4.44 3195 1 1 Max Lila SciLor 3.686 2489 0 0 Lila SciLor 3.659 2478 0 0 Shut Off Message Lila SciLor 4.26 2870 0 0 Max Lila SciLor 4.47 3180 1 0 Max Red SciLor 3.641 2456 0 0 Red SciLor 3.540 2400 0 0 Shut Off Message Voltage measurement TP38\nfrom machine import Pin from machine import ADC p_charger = Pin(\u0026#39;GP17\u0026#39;, mode=Pin.IN) p_charger.value() adc = ADC() p_battery = adc.channel(pin=\u0026#39;GP5\u0026#39;) p_battery.value() Voltage calculation # From the data above following calculation can be used:\nvoltage = adc * 100/67690; //charger disconnected voltage = adc * 100/71907; //charger connected The OFW uses a slightly different formula:\nvoltage = ((adc * (40000/26173)) - 89) / 1000 adc = ((1000 * voltage) + 89) * (26173/40000) The OFW uses the value 3,601v or adc=2297 as low battery voltage (0xE11). As shutoff voltage 3,299v / 3,300v or adc=2099/2100 are used (0xCE3/0xCE4).\nPhotos (Custom Battery Pack) # Power supply # Voltage: 9V Current: 1.5A Plug 5.5x2.1mm (+9V inner side) Photo # "},{"id":13,"href":"/docs/wiki/cc3200/boot-process/","title":"Boot Process","section":"CC3200","content":" Boot Process # Introduction # When the CC3200 is started the integrated bootloader is loading /sys/mcuimg.bin from flash to the memory address 0x20004000. The SRAM is located at 0x20000000 to 0x2003FFFF. If you want to implement a second stage bootloader you would usally implement a relocator that moves your bootloader to 0x2000000. If it bootloader smaller than 16kB (0x4000) you then may load your desired firmware from SD or Flash to 0x20004000 as the integrated bootloader would do. The toniebox\u0026rsquo;s (seconds stage) bootloader is bigger than 16kB. So loading it to 0x20000000 wouldn\u0026rsquo;t work.\nRelocator # The original firmware bootloader has a relocator which loads the bootloader to memory address 0x20038000, which 32kB before the very end of the memory.\nOFW bootloader # The bootloader loads a file called \u0026ldquo;/sys/mcubootinfo.bin\u0026rdquo; that contains the id of the firmware to load.\nTo verify the integrity of the firmware, a sha256 hash is appended to the end of each firmware file. The bootloader checks it.\n"},{"id":14,"href":"/docs/tools/teddycloud/setup/dns/cc3200/","title":"CC3200","section":"DNS","content":" CC3200 with altUrl patch # With a CC3200 box it is recommened to a altUrl patch. As a standard the fritzbox patch is set in HackieboxNG ofw2. The configuration file can be edited on your microSD (sd:/revvox/boot/ngCfg.json).\nfritz.box # If you have a fritzbox you can use the altUrl.tc.fritz.box patch. You\u0026rsquo;ll just have to set the name of your server in your fritzbox to tc (Heimnetz -\u0026gt; Netzwerk -\u0026gt; Netzwerkverbindungen -\u0026gt; bearbeiten).\nOther (custom dns) # The altUrl.305 patch replaces the cloud urls with custom ones. Set the DNS entries for prod.revvox and rtnl.revvox to the teddyCloud servers ip-address. You may also edit the patch yourself to set the ip-address directly. Please beware, it should not be longer than the original url, which is 12 characters.\nPlease continue with on the teddyCloud tool page from the beginning\n"},{"id":15,"href":"/docs/tools/teddycloud/setup/dump-certs/cc3200/","title":"CC3200","section":"Dump certificates","content":" CC3200 # You can use the cc3200tool to dump your certificates over the Tag Connect debug port of the box. If you have installed the HackieboxNG Bootloader you should already have those files in your backup. If not, you should install HackieboxNG. This will allow to to read and write files from/to microSD and flash by booting the Hackiebox CFW. Please drop the three .der files to /certs/client/.\nRead certificates via Hackiebox CFW # You may use wget to download the certificates or just copy the url into your browser and save them manually. First of all please boot the Hackiebox CFW, which should be in cfw1, so blue 1.\nip=\u0026lt;toniebox-ip\u0026gt; wget \u0026#34;http://$ip/api/ajax?cmd=get-flash-file\u0026amp;filepath=/cert/ca.der\u0026#34; -O ca.der wget \u0026#34;http://$ip/api/ajax?cmd=get-flash-file\u0026amp;filepath=/cert/private.der\u0026#34; -O private.der wget \u0026#34;http://$ip/api/ajax?cmd=get-flash-file\u0026amp;filepath=/cert/client.der\u0026#34; -O client.der Read certificates via cc3200tool # You can dump your certificates with the cc3200tool.\ncc3200tool -p COM3 read_file /cert/ca.der cert/ca.der read_file /cert/private.der cert/private.der read_file /cert/client.der cert/client.der Please continue with flash CA step for the CC3200\n"},{"id":16,"href":"/docs/tools/teddycloud/setup/flash-ca/cc3200/","title":"CC3200","section":"Flash replacement CA","content":" CC3200 # It is recommended to flash the replacement CA to /cert/c2.der and use the hackiebox-ng bootloader with the altCA.305 patch. This will allow you to switch between the original and your replacement certificate. If you have installed the HackieboxNG Bootloader and the Hackiebox CFW you may upload the certificate via the webinterface of the CFW. Otherwise you can use the cc3200tool for this task.\nFlash c2.der via Hackiebox # First of all please boot the Hackiebox CFW, which should be in cfw1, so blue 1. Open the its webinterface (https://) and switch to Expert-File Upload. Select Target Flash Select your certs/server/ca.der from teddyCloud Enter /cert/c2.der as SD/Flash path Press Upload and wait for ok Otherwise try again (only enable overwrite, if you already flashed the c2.der in the past) Flash c2.der via cc3200tool # cc3200tool -p COM3 write_file certs/server/ca.der /cert/c2.der Additional # Beware The blockCheckRemove.310, noCerts.305 and the noHide.308 patch breaks the content passthrough to Boxine. Please disable them by removing them in the ngCfg.json on the SD card if you previously enabled them.\nPlease continue with DNS step for the CC3200\n"},{"id":17,"href":"/docs/tools/teddycloud/setup/dns/cc3235/","title":"CC3235","section":"DNS","content":" CC3235 # Set the DNS entries for prod.de.tbs.toys and rtnl.bxcl.de to the teddyCloud servers ip-address. Beware, this will cut off the connection of all tonieboxes within your network, which arn\u0026rsquo;t patched with your replacement CA! As an alternative you can set the gateway for the tonieboxes to the ip of teddyCloud. With OpenWRT it works this way:\nuci set dhcp.teddycloud=\u0026#34;tag\u0026#34; uci set dhcp.teddycloud.dhcp_option=\u0026#34;3,1.2.3.4\u0026#34; # 1.2.3.4=teddycloud ip uci add dhcp host uci set dhcp.@host[-1].name=\u0026#34;toniebox_1\u0026#34; uci set dhcp.@host[-1].mac=\u0026#34;00:11:22:33:44:55\u0026#34; # toniebox mac uci set dhcp.@host[-1].ip=\u0026#34;1.2.3.101\u0026#34; # toniebox_1 ip uci set dhcp.@host[-1].tag=\u0026#34;teddycloud\u0026#34; uci commit dhcp /etc/init.d/dnsmasq restart Please continue with on the teddyCloud tool page from the beginning\n"},{"id":18,"href":"/docs/tools/teddycloud/setup/dump-certs/cc3235/","title":"CC3235","section":"Dump certificates","content":" CC3235 # You\u0026rsquo;ll have to manually extract it from the flash of the box with a SOP8 clamp directly from the memory or by desoldering it. Reading in-circuit can be tricky, but is possible. I recommend flashrom as tool for that. It may be necessary to use a more recent version of it.\nReading the flash with Pico # As a probe you may use a raspberry pi pico with the serprog protocol firmware for it.\nflashrom -p serprog:dev=/dev/ttyACM0:921600 -r cc32xx-flash.bin --progress You may do multiple reads and compare the result\nflashrom -p serprog:dev=/dev/ttyACM0:921600 -r cc32xx-flash.2.bin --progress diff cc32xx-flash.bin cc32xx-flash.2.bin #no output = equal Extract certificates # You can use the cc3200tool to extract your certificates from the flash dump afterwards.\ncc3200tool -if cc32xx-flash.bin -d cc32xx read_all_files extract/ Please continue with flash CA step for the CC3235\n"},{"id":19,"href":"/docs/tools/teddycloud/setup/flash-ca/cc3235/","title":"CC3235","section":"Flash replacement CA","content":" CC3235 # Replace the original CA within your flash dump with the replacement CA and reflash it to your box.\ncc3200tool -if cc32xx-flash.bin -of cc32xx-flash.customca.bin -d cc32xx write_file customca.der /cert/ca.der flashrom -p serprog:dev=/dev/ttyACM0:921600 -w cc32xx-flash.bin --progress If the box does not connect at all (codeword owl), you may try the old gencerts.sh to generate new certificates and reflash the box.\nPlease continue with DNS step for the CC3235\n"},{"id":20,"href":"/docs/tools/teddycloud/tecdoc/content-json/","title":"content-json config","section":"Technical Docs","content":" content.json # Toniecloud uses the content-json file to save some data and control the behaviour of a tag. Its name equal to the TAFs name but with a json file ending like 500304E0.json. This file sits alongside the actual audio content.\nUsually it looks like the following:\n{ \u0026#34;live\u0026#34;:\tfalse, \u0026#34;nocloud\u0026#34;:\tfalse, \u0026#34;source\u0026#34;:\t\u0026#34;\u0026#34;, \u0026#34;skip_seconds\u0026#34;:\t0, \u0026#34;cache\u0026#34;:\tfalse, \u0026#34;cloud_ruid\u0026#34;:\t\u0026#34;\u0026#34;, \u0026#34;cloud_auth\u0026#34;:\t\u0026#34;\u0026#34;, \u0026#34;cloud_override\u0026#34;:\tfalse, \u0026#34;tonie_model\u0026#34;:\t\u0026#34;\u0026#34;, \u0026#34;_version\u0026#34;:\t5 } Specification # Option Type Default Description live bool false Always start the content from the beginning and redownload its content nocloud bool false Do not sync the TAF with the boxine cloud source str \u0026quot;\u0026quot; Use this TAF as content or convert this file into a TAF, when the box requests content (everything ffmpeg can decode, files or urls for webradio) skip_seconds uint32 0 Skips the audio by given seconds (source) cache bool false Do not delete the TAF converted via source after sending it cloud_ruid str \u0026quot;\u0026quot; rUID of the Tonie. Enable Dump rUID/auth in teddyCloud to fill in the rUID when placing a Tonie. This can also be used to reroute a tag to a different one or download a Tonie via the webinterface by clicking on the download icon beside the json. (cloud_auth needed) cloud_auth str \u0026quot;\u0026quot; Content password of the Tonie. Enable Dump rUID/auth in teddyCloud. cloud_override bool false Reroute a tag to a different one (cloud_ruid/cloud_auth) tonie_model str \u0026quot;\u0026quot; Identify the Tonie _version uint32 5 Version of the file Examples # Custom audiobooks that you added to Teddycloud (no official Tonies) typically will have nocloud enabled You can download content right from an URL by setting the source. In combination with nocloud you can easily set up custom content. The custom content will be downloaded to your Toniebox when triggering a content update (long press one of the volume-ears). "},{"id":21,"href":"/docs/tools/teddycloud/usage/custom-tags/","title":"Custom Tags","section":"teddyCloud","content":" Custom Tags # To use custom tags within teddyCloud, you need to obtain specific tags and follow these steps.\n1. Buy specific tags # The Toniebox only accepts specific tags that meet the following criteria:\nType: SLIX-L Privacy-Mode UID length: 16 characters UID starts with: E0 04 03 Note: Only a specially patched version of the CC3200 accepts other SLIX NFC tags.\n(OPTIONAL) 2. Read and save the tag ID # Once you place a new tag on the Toniebox, it will automatically activate privacy mode on this tag, making it unrecognizable by other NFC readers. Privacy mode must be deactivated beforehand.\nIf you want to save the tag ID for later use, please use a common NFC tag reader (e.g., via an iOS or Android app).\n3. Place the new NFC tag on the Toniebox # Place the new custom NFC tag on your Toniebox for the first time. (The Toniebox will respond with an error code, but that\u0026rsquo;s fine for now since no custom play has been assigned yet.)\nCheck the teddyCloud GUI: Filter for last played tags to find the unknown tag you recently placed on the Toniebox.\n4. Assign content # Now you can assign content to the new custom tag:\nClick on the \u0026ldquo;Edit\u0026rdquo; button. Choose a source from your library. Click on \u0026ldquo;Save\u0026rdquo;. Press and hold one of the Toniebox\u0026rsquo;s ears for 3 seconds to perform a freshness check. After that, your new custom tag should work. 5. Change the name and picture of the custom tag # If you want to change the name and picture of your custom tag, follow these steps:\nCreate a new \u0026ldquo;Model\u0026rdquo; as described in tonies.custom.json config and save it to your tonies.custom.json file. Go to the teddyCloud GUI, click on \u0026ldquo;Settings\u0026rdquo; and then \u0026ldquo;Reload Tonies.json\u0026rdquo;. Afterwards, the added entry will be available for selection. Edit your custom tag again, insert the unique ID you assigned to your new model, and click on \u0026ldquo;Save\u0026rdquo;. The name, description and picture should now be updated.\n"},{"id":22,"href":"/docs/wiki/cc3200/debug-port/","title":"Debug port","section":"CC3200","content":" Debug Port # Position of debug port on Toniebox-PCB # The debug port runs on 3.3 V\nLayout debug port # 10 9 8 7 6 1 2 3 4 5 Pin Function Comment 1 TX 55 2 RX 57 3 VCC 3.3V 4 RST 32 5 GND 6 ? 45 7 TCK 19 8 TMS 20 9 SOP2 21 (indirect SOP0 35) 10 ? U3 Tag-Connector for debug port # To connect to the debug port a Tag-Connector can be used, a fitting PCB clip or small wires / resistors\nDatasheet: Tag Connect TC2050-IDC-NL\nAvailable at: Tag Connect TC2050-IDC-NL\nAlternative (cheaper): PCB Clip 1.27mm 5 Pin Double Row\nUsing 0.35mm 0-ohm resistors or wire\nBoot Mode # The CC3200 device implements a sense-on-power (SoP) scheme to switch between two modes that are available within the Tonie project. (To switch between the boot modes a restart of the device is needed.) CC3200 datasheet 5.9.3\nSWD Mode # SOP2 (pin 9) low (standard) will activate the functional mode with a 2-wire SWD mapped to TCK (pin 7) and TMS (pin 8) of the debug port.\nUART mode # SOP2 (pin 9) high will activate the UART load mode to flash the system during development and in OEM assembly line\nExtract Firmware # Introduction # Grab your favourite USB-UART 3.3V interface, recommending those with DTR or RTS port to automate board reset. You may also use a CC3200 Launchpad, but then you will need to reset it by hand. SOP2 need to be pulled high while reset to set the cc3200 into UART-Mode.\nYou may have a UART to USB adapter that supports both 3.3V and 5V. In this case you should find a jumper on the board to select the correct mode. You can see examples of such jumpers here (but there are others.)\nIn any case, make absolutely sure that 3.3V (often labelled 3v3) is set or you will frie your board!\nToolset # Use cc3200tool to extract the firmware. Just download it to your favorite location. You will need to install python3 (including pip3). The cc3200tool needs the package pyserial (which can be automatically installed via the setup.py). You may install it manually via pip3 install pyserial.\nConnection # Please connect the toniebox to your power supply and/or battery. Please double check your UART that its VCC is 3.3V and not 5.0V. If your UART is missing DTR you will need to connect the Toniebox RST to GND for a moment before each command to reset the box. If you reset the box it should glow green all the time without booting and playing its startup jingle.\nToniebox Toniebox UART GND GND TX RX RX TX RST DTR VCC SOP2* SOP2 VCC* *Pin SOP2 of the Toniebox should be bridged with the VCC of the Toniebox.\nIf you have got problems check out the known problems and fixes.\nExample commands # You may replace COM3 with the right port on your computer (linux ex. /dev/ttyUSB0). Please add --reset dtr to each command (see 6.) if you have RST connected to DTR for auto reset. In addition, if you got connection issues, you may try to connect SOP2 to the RTS pin directly and add --sop2 ~rts to each command.\nDescriptiion Command 1 List files in FatFS (useful to check the connection) cc3200tool -p COM3 list_filesystem 2 Extract full firmware cc3200tool -p COM3 read_flash firmware.dmp 3 Extract all files cc3200tool -p COM3 read_all_files ./target_dir 4 Extract singe files cc3200tool -p COM3 read_file /sys/mcuimg.bin ./sys/mcuimg.bin 5 Extract firmware and files cc3200tool -p COM3 read_flash firmware.dmp read_all_files ./target_dir 6 List files in FatFS with DTR auto reset cc3200tool -p COM3 --reset dtr list_filesystem 7 List files in FatFS with DTR/RTS auto reset/sop2 cc3200tool -p COM3 --reset dtr --sop2 ~rts list_filesystem If you are done, either disconnect the box from the charger and battery or remove SOP2 from VCC and connect the Toniebox RST to GND for a moment to reset the box.\nLog output # The original bootloader and the original firmware do some logging to the serial port with baudrate 921600 ex. Linux: \u0026ldquo;screen /dev/ttyUSB0 921600\u0026rdquo; or under Windows with PuTTY.\nbootloader # CC3200 bootloader v1472818501 (09c6374) build: Fri Sep 2 14:15:01 CEST 2016 dl:1.2.0 sl:1.0.1.6 hw:tb-smt-16:1:13 loaded battery critical level = 3600 battery_level = 4823 original firmware # QO (�72-�3�]FWc041b2f13 Nov 17:47E�3�]Jc041b2f0. (�2EU_V3.0.5-0E�3�]Jc041b2f\u0026lt;: (�2EU_V3.0.5_stable_branchE�3�]Jc041b2f+) (�92E�3�]\u0026amp; (#2E�3�]]Jc041b (2SPE�3�]%#E�3�� 2� SP���E�3�]#! � (�/�E�3�]20 � (\u0026lt;2�E�3�]20 � (=2� 2%�80USDS�(�5\\E�3�]#!E�3� (�9-�z[E�3�] � (�72E�3�]@\u0026gt; � (� 94E36D679CD9E�3�]#! � (�/��E�3�]#!E�� (�/��E�3�]/�E�� (�02�E�3�]2�3�� #(�02-E�3�]#! � (�/�E�3�]#! � (�/�E�3�]#! � (�/��E�3�]#! �! !(�0E�3�]#! �\u0026#34; !(�0E�3�] �# (�2E�3�] �$ (�02E�3�] �% (�\u0026amp;2�E�3�] �\u0026amp; (�\u0026amp;2;E�3�] �\u0026#39; (�\u0026amp;2�)E�3�]! �( (�\u0026amp;2�)NE�3�] �) (�\u0026amp;2�E�3�] �* (�\u0026amp;E�3�]#! �+ (�\u0026amp;@\u0026#39;|E�3�] �, #(�02-E�3�] �- (�72E�3�]#! �. (�5`E�3�] �/ (�2E�3�];9 �0 (� 1 (�22\u0026#34;content/00000001/00000000\\���E�3�]#! 2 (�u��WE�3�]#! 3 (�9\\�E�3�]\u0026#39;% 4 (�52E�3�] 5 (�52E�3�]#!2 E6 (�5u��WE�3�] ;7 (�62�E�3�] �8 (�%2E�3�]\u0026lt;: 9 (�2!prod.de.tbs.toys49�E�3�];9 �: (� 2 E�3�] �; (�2E�3�] �\u0026lt; (�52E�3�] = (�22\\ E�3�] ]\u0026gt; (�22E�3�]#! ]? (�/�E�3�]/- ]@ (�/2�E�3�] ^A (�2E�3�]#! ^B (�/��E�3�] �C (�%2E�3�]20 �D (Z2E�3�]20 �E (\u0026lt;2� /E�3�]20 �F (=2� E�3�]MK (G (�22SPGETprod.de.tbs.toys�/v1/ota/4?cv=33545114E�3�]86 �H %(�2rtnl.bxcl.de�L8�E�3�]EC �I (h2+prod.de.tbs.toys�/v1/ota/4?cv=33545114E�3�] �J (�82�E�3�]#! 0K (�8�JE�3�]53 L (�\u0026gt;2Fritz!Box 75905037E1B7F880����E�3�]\u0026#39;% \u0026#34;-M %(�:2QE�3�]QO #-N(�72-�3�]FWc041b2f13 Nov 17:47E�3�]Jc041b2f0. $-O(�2EU_V3.0.5-0E�3�]Jc041b2f\u0026lt;: %-P(�2EU_V3.0.5_stable_branchE�3�]Jc041b2f+) \u0026amp;-Q �� 8�E�3�].,(�02/qT (�02_B$ 8�E�3�].,�020qU (�02_�� 8�E�3�]0. 1qV (� 2D8�E�3�] "},{"id":23,"href":"/docs/tools/teddycloud/tecdoc/edit-local/","title":"Edit JSON files with vscode","section":"Technical Docs","content":" Edit JSON files with vscode # You can use a json schema which can provide you the ability for autocompletion and validation in your favorite editor. This article describes it for vscode.\nSchemas:\ncontent-json-schema.json tonies-custom-json-schema.json tonieboxes-custom-json-schema.json plalist-tap-json-schema.json content.json # Add the Schemaurl to the json file.\nExample:\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://tonies-wiki.revvox.deteddyCloud/tecdoc/content-json-schema.json\u0026#34;, \u0026#34;live\u0026#34;: false, \u0026#34;nocloud\u0026#34;: false, \u0026#34;source\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;skip_seconds\u0026#34;: 0, \u0026#34;cache\u0026#34;: false, \u0026#34;cloud_ruid\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cloud_auth\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;cloud_override\u0026#34;: false, \u0026#34;tonie_model\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;_version\u0026#34;: 5 } tonies.custom.json / tonieboxes.custom.json # To configure this for vscode you have to edit .vscode/settings.json.\nAdd the following parts to the settings.json:\n{ \u0026#34;json.schemaDownload.enable\u0026#34;: true, \u0026#34;json.schemas\u0026#34;: [ { \u0026#34;fileMatch\u0026#34;: [\u0026#34;tonies.custom.json\u0026#34;], \u0026#34;url\u0026#34;: \u0026#34;https://tonies-wiki.revvox.deteddyCloud/tecdoc/tonies-custom-json-schema.json\u0026#34; }, { \u0026#34;fileMatch\u0026#34;: [\u0026#34;tonieboxes.custom.json\u0026#34;], \u0026#34;url\u0026#34;: \u0026#34;https://tonies-wiki.revvox.deteddyCloud/tecdoc/tonieboxes-custom-json-schema.json\u0026#34; } ] } Plalist (TAP) Files # { \u0026#34;$schema\u0026#34;: \u0026#34;https://tonies-wiki.revvox.deteddyCloud/tecdoc/plalist-tap-json-schema.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;tap\u0026#34;, \u0026#34;audio_id\u0026#34;: 0, \u0026#34;filepath\u0026#34;: \u0026#34;lib://by/tapID/radio.taf\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Radio\u0026#34;, \u0026#34;files\u0026#34;: [ { \u0026#34;filepath\u0026#34;: \u0026#34;lib://by/audioID/1234567890.taf\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Hörspiel Tonie\u0026#34; }, { \u0026#34;filepath\u0026#34;: \u0026#34;lib://mp3/album/title.mp3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;A Song\u0026#34; }, { \u0026#34;filepath\u0026#34;: \u0026#34;http://nas.intranet/musiclibrary/album/song.mp3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Network Audio\u0026#34; } ] } "},{"id":24,"href":"/docs/tools/teddycloud/setup/error-codes/","title":"Error codes","section":"Setup","content":" teddyCloud error code table # Error Code Error Technical Name Error Description 0 NO_ERROR Success 1 ERROR_FAILURE Generic error code 2 ERROR_INVALID_PARAMETER Invalid parameter 3 ERROR_PARAMETER_OUT_OF_RANGE Specified parameter is out of range 4 ERROR_BAD_CRC Bad CRC detected 5 ERROR_BAD_BLOCK Bad block detected 6 ERROR_INVALID_RECIPIENT Invalid recipient 7 ERROR_INVALID_INTERFACE Invalid interface 8 ERROR_INVALID_ENDPOINT Invalid endpoint 9 ERROR_INVALID_ALT_SETTING Alternate setting does not exist 10 ERROR_UNSUPPORTED_REQUEST Unsupported request 11 ERROR_UNSUPPORTED_CONFIGURATION Unsupported configuration 12 ERROR_UNSUPPORTED_FEATURE Unsupported feature 13 ERROR_ENDPOINT_BUSY Endpoint already in use 14 ERROR_USB_RESET USB reset 15 ERROR_ABORTED Operation aborted 100 ERROR_OUT_OF_MEMORY Out of memory 101 ERROR_OUT_OF_RESOURCES Out of resources 102 ERROR_INVALID_REQUEST Invalid request 103 ERROR_NOT_IMPLEMENTED Not implemented 104 ERROR_VERSION_NOT_SUPPORTED Version not supported 105 ERROR_INVALID_SYNTAX Invalid syntax 106 ERROR_AUTHENTICATION_FAILED Authentication failed 107 ERROR_UNEXPECTED_RESPONSE Unexpected response 108 ERROR_INVALID_RESPONSE Invalid response 109 ERROR_UNEXPECTED_VALUE Unexpected value 110 ERROR_WAIT_CANCELED Wait canceled 200 ERROR_OPEN_FAILED Open failed 201 ERROR_CONNECTION_FAILED Connection failed 202 ERROR_CONNECTION_REFUSED Connection refused 203 ERROR_CONNECTION_CLOSING Connection closing 204 ERROR_CONNECTION_RESET Connection reset 205 ERROR_NOT_CONNECTED Not connected 206 ERROR_ALREADY_CLOSED Already closed 207 ERROR_ALREADY_CONNECTED Already connected 208 ERROR_INVALID_SOCKET Invalid socket 209 ERROR_PROTOCOL_UNREACHABLE Protocol unreachable 210 ERROR_PORT_UNREACHABLE Port unreachable 211 ERROR_INVALID_FRAME Invalid frame 212 ERROR_INVALID_HEADER Invalid header 213 ERROR_WRONG_CHECKSUM Wrong checksum 214 ERROR_WRONG_IDENTIFIER Wrong identifier 215 ERROR_WRONG_CLIENT_ID Wrong client ID 216 ERROR_WRONG_SERVER_ID Wrong server ID 217 ERROR_WRONG_COOKIE Wrong cookie 218 ERROR_NO_RESPONSE No response received 219 ERROR_RECEIVE_QUEUE_FULL Receive queue full 220 ERROR_TIMEOUT Timeout 221 ERROR_WOULD_BLOCK Operation would block 222 ERROR_INVALID_NAME Invalid name 223 ERROR_INVALID_OPTION Invalid option 224 ERROR_UNEXPECTED_STATE Unexpected state 225 ERROR_INVALID_COMMAND Invalid command 226 ERROR_INVALID_PROTOCOL Invalid protocol 227 ERROR_INVALID_STATUS Invalid status 228 ERROR_INVALID_ADDRESS Invalid address 229 ERROR_INVALID_PORT Invalid port 230 ERROR_INVALID_MESSAGE Invalid message 231 ERROR_INVALID_KEY Invalid key 232 ERROR_INVALID_KEY_LENGTH Invalid key length 233 ERROR_INVALID_EPOCH Invalid epoch 234 ERROR_INVALID_SEQUENCE_NUMBER Invalid sequence number 235 ERROR_INVALID_CHARACTER Invalid character 236 ERROR_INVALID_LENGTH Invalid length 237 ERROR_INVALID_PADDING Invalid padding 238 ERROR_INVALID_MAC Invalid MAC 239 ERROR_INVALID_TAG Invalid tag 240 ERROR_INVALID_TYPE Invalid type 241 ERROR_INVALID_VALUE Invalid value 242 ERROR_INVALID_CLASS Invalid class 243 ERROR_INVALID_VERSION Invalid version 244 ERROR_INVALID_PIN_CODE Invalid PIN code 245 ERROR_WRONG_LENGTH Wrong length 246 ERROR_WRONG_TYPE Wrong type 247 ERROR_WRONG_ENCODING Wrong encoding 248 ERROR_WRONG_VALUE Wrong value 249 ERROR_INCONSISTENT_VALUE Inconsistent value 250 ERROR_UNSUPPORTED_TYPE Unsupported type 251 ERROR_UNSUPPORTED_ALGO Unsupported algorithm 252 ERROR_UNSUPPORTED_CIPHER_SUITE Unsupported cipher suite 253 ERROR_UNSUPPORTED_CIPHER_MODE Unsupported cipher mode 254 ERROR_UNSUPPORTED_CIPHER_ALGO Unsupported cipher algorithm 255 ERROR_UNSUPPORTED_HASH_ALGO Unsupported hash algorithm 256 ERROR_UNSUPPORTED_KEY_EXCH_ALGO Unsupported key exchange algorithm 257 ERROR_UNSUPPORTED_SIGNATURE_ALGO Unsupported signature algorithm 258 ERROR_UNSUPPORTED_ELLIPTIC_CURVE Unsupported elliptic curve 259 ERROR_INVALID_SIGNATURE_ALGO Invalid signature algorithm 260 ERROR_CERTIFICATE_REQUIRED Certificate required 261 ERROR_MESSAGE_TOO_LONG Message too long 262 ERROR_OUT_OF_RANGE Out of range 263 ERROR_MESSAGE_DISCARDED Message discarded 264 ERROR_INVALID_PACKET Invalid packet 265 ERROR_BUFFER_EMPTY Buffer is empty 266 ERROR_BUFFER_OVERFLOW Buffer overflow 267 ERROR_BUFFER_UNDERFLOW Buffer underflow 268 ERROR_INVALID_RESOURCE Invalid resource 269 ERROR_INVALID_PATH Invalid path 270 ERROR_NOT_FOUND Not found 271 ERROR_ACCESS_DENIED Access denied 272 ERROR_NOT_WRITABLE Not writable 273 ERROR_AUTH_REQUIRED Authentication required 274 ERROR_TRANSMITTER_BUSY Transmitter is busy 275 ERROR_NO_RUNNING No running operation 300 ERROR_INVALID_FILE Invalid file 301 ERROR_FILE_NOT_FOUND File not found 302 ERROR_FILE_OPENING_FAILED File opening failed 303 ERROR_FILE_READING_FAILED File reading failed 304 ERROR_END_OF_FILE End of file reached 305 ERROR_UNEXPECTED_END_OF_FILE Unexpected end of file 306 ERROR_UNKNOWN_FILE_FORMAT Unknown file format 307 ERROR_INVALID_DIRECTORY Invalid directory 308 ERROR_DIRECTORY_NOT_FOUND Directory not found 400 ERROR_FILE_SYSTEM_NOT_SUPPORTED File system not supported 401 ERROR_UNKNOWN_FILE_SYSTEM Unknown file system 402 ERROR_INVALID_FILE_SYSTEM Invalid file system 403 ERROR_INVALID_BOOT_SECTOR_SIGNATURE Invalid boot sector signature 404 ERROR_INVALID_SECTOR_SIZE Invalid sector size 405 ERROR_INVALID_CLUSTER_SIZE Invalid cluster size 406 ERROR_INVALID_FILE_RECORD_SIZE Invalid file record size 407 ERROR_INVALID_INDEX_BUFFER_SIZE Invalid index buffer size 408 ERROR_INVALID_VOLUME_DESCRIPTOR_SIGNATURE Invalid volume descriptor signature 409 ERROR_INVALID_VOLUME_DESCRIPTOR Invalid volume descriptor 410 ERROR_INVALID_FILE_RECORD Invalid file record 411 ERROR_INVALID_INDEX_BUFFER Invalid index buffer 412 ERROR_INVALID_DATA_RUNS Invalid data runs 413 ERROR_WRONG_TAG_IDENTIFIER Wrong tag identifier 414 ERROR_WRONG_TAG_CHECKSUM Wrong tag checksum 415 ERROR_WRONG_MAGIC_NUMBER Wrong magic number 416 ERROR_WRONG_SEQUENCE_NUMBER Wrong sequence number 417 ERROR_DESCRIPTOR_NOT_FOUND Descriptor not found 418 ERROR_ATTRIBUTE_NOT_FOUND Attribute not found 419 ERROR_RESIDENT_ATTRIBUTE Resident attribute 420 ERROR_NOT_RESIDENT_ATTRIBUTE Not resident attribute 421 ERROR_INVALID_SUPER_BLOCK Invalid super block 422 ERROR_INVALID_SUPER_BLOCK_SIGNATURE Invalid super block signature 423 ERROR_INVALID_BLOCK_SIZE Invalid block size 424 ERROR_UNSUPPORTED_REVISION_LEVEL Unsupported revision level 425 ERROR_INVALID_INODE_SIZE Invalid inode size 426 ERROR_INODE_NOT_FOUND Inode not found 500 ERROR_UNEXPECTED_MESSAGE Unexpected message 501 ERROR_URL_TOO_LONG URL is too long 502 ERROR_QUERY_STRING_TOO_LONG Query string is too long 503 ERROR_NO_ADDRESS No address 504 ERROR_NO_BINDING No binding 505 ERROR_NOT_ON_LINK Not on link 506 ERROR_USE_MULTICAST Use multicast 507 ERROR_NAK_RECEIVED NAK received 508 ERROR_EXCEPTION_RECEIVED Exception received 509 ERROR_NO_CARRIER No carrier 510 ERROR_INVALID_LEVEL Invalid level 511 ERROR_WRONG_STATE Wrong state 512 ERROR_END_OF_STREAM End of stream 513 ERROR_LINK_DOWN Link down 514 ERROR_INVALID_OPTION_LENGTH Invalid option length 515 ERROR_IN_PROGRESS Operation in progress 516 ERROR_NO_ACK No acknowledgment received 517 ERROR_INVALID_METADATA Invalid metadata 518 ERROR_NOT_CONFIGURED Not configured 519 ERROR_NAME_RESOLUTION_FAILED Name resolution failed 520 ERROR_NO_ROUTE No route to destination 521 ERROR_WRITE_FAILED Write failed 522 ERROR_READ_FAILED Read failed 523 ERROR_UPLOAD_FAILED Upload failed 524 ERROR_READ_ONLY_ACCESS Read-only access 525 ERROR_INVALID_SIGNATURE Invalid signature 526 ERROR_INVALID_TICKET Invalid ticket 527 ERROR_NO_TICKET No ticket 528 ERROR_BAD_RECORD_MAC Bad record MAC 529 ERROR_RECORD_OVERFLOW Record overflow 530 ERROR_HANDSHAKE_FAILED Handshake failed 531 ERROR_NO_CERTIFICATE No certificate 532 ERROR_BAD_CERTIFICATE Bad certificate 533 ERROR_UNSUPPORTED_CERTIFICATE Unsupported certificate 534 ERROR_UNKNOWN_CERTIFICATE Unknown certificate 535 ERROR_CERTIFICATE_EXPIRED Certificate expired 536 ERROR_CERTIFICATE_REVOKED Certificate revoked 537 ERROR_UNKNOWN_CA Unknown certificate authority 538 ERROR_DECODING_FAILED Decoding failed 539 ERROR_DECRYPTION_FAILED Decryption failed 540 ERROR_ILLEGAL_PARAMETER Illegal parameter 541 ERROR_MISSING_EXTENSION Missing extension 542 ERROR_UNSUPPORTED_EXTENSION Unsupported extension 543 ERROR_INAPPROPRIATE_FALLBACK Inappropriate fallback 544 ERROR_NO_APPLICATION_PROTOCOL No application protocol 545 ERROR_MORE_DATA_REQUIRED More data required 546 ERROR_TLS_NOT_SUPPORTED TLS not supported 547 ERROR_PRNG_NOT_READY PRNG not ready 548 ERROR_SERVICE_CLOSING Service closing 549 ERROR_INVALID_TIMESTAMP Invalid timestamp 550 ERROR_NO_DNS_SERVER No DNS server 551 ERROR_OBJECT_NOT_FOUND Object not found 552 ERROR_INSTANCE_NOT_FOUND Instance not found 553 ERROR_ADDRESS_NOT_FOUND Address not found 554 ERROR_UNKNOWN_IDENTITY Unknown identity 555 ERROR_UNKNOWN_ENGINE_ID Unknown engine ID 556 ERROR_UNKNOWN_USER_NAME Unknown user name 557 ERROR_UNKNOWN_IDENTITY Unknown identity 558 ERROR_UNKNOWN_ENGINE_ID Unknown engine ID 559 ERROR_UNKNOWN_USER_NAME Unknown user name 560 ERROR_UNKNOWN_CONTEXT Unknown context 561 ERROR_UNAVAILABLE_CONTEXT Unavailable context 562 ERROR_UNSUPPORTED_SECURITY_LEVEL Unsupported security level 563 ERROR_NOT_IN_TIME_WINDOW Not in time window 564 ERROR_AUTHORIZATION_FAILED Authorization failed 565 ERROR_INVALID_FUNCTION_CODE Invalid function code 566 ERROR_DEVICE_BUSY Device busy 567 ERROR_REQUEST_REJECTED Request rejected 568 ERROR_INVALID_CHANNEL Invalid channel 569 ERROR_INVALID_GROUP Invalid group 570 ERROR_UNKNOWN_SERVICE Unknown service 571 ERROR_UNKNOWN_REQUEST Unknown request 572 ERROR_FLOW_CONTROL Flow control 573 ERROR_INVALID_PASSWORD Invalid password 574 ERROR_INVALID_HANDLE Invalid handle 575 ERROR_BAD_NONCE Bad nonce 576 ERROR_UNEXPECTED_STATUS Unexpected status 577 ERROR_RESPONSE_TOO_LARGE Response too large 578 ERROR_INVALID_SESSION Invalid session 579 ERROR_TICKET_EXPIRED Ticket expired 580 ERROR_INVALID_ENTRY Invalid entry 581 ERROR_TABLE_FULL Table full 582 ERROR_END_OF_TABLE End of table 583 ERROR_ALREADY_RUNNING Already running 584 ERROR_UNKOWN_KEY Unknown key 585 ERROR_UNKNOWN_TYPE Unknown type 586 ERROR_UNSUPPORTED_OPTION Unsupported option 587 ERROR_INVALID_SPI Invalid SPI 588 ERROR_RETRY Retry 589 ERROR_POLICY_FAILURE Policy failure 590 ERROR_INVALID_PROPOSAL Invalid proposal 591 ERROR_INVALID_SELECTOR Invalid selector 592 ERROR_WRONG_NONCE Wrong nonce 593 ERROR_WRONG_ISSUER Wrong issuer 594 ERROR_RESPONSE_EXPIRED Response expired 595 ERROR_CRL_EXPIRED CRL expired 596 ERROR_NO_MATCH No match 597 ERROR_PARTIAL_MATCH Partial match "},{"id":25,"href":"/docs/box-variants/esp32/","title":"ESP32","section":"Box Variants","content":"The ESP32 variante is the latest version. The board should look like this.\n"},{"id":26,"href":"/docs/tools/teddycloud/setup/dns/esp32/","title":"ESP32","section":"DNS","content":" ESP32 # You can either set the IP/hostname within the image or you may do it like on the CC3235. With the teddyCloud you can use the ESP32 box flashing section to can set the DNS or IP address during the flash process.\nPlease continue with on the teddyCloud tool page from the beginning\n"},{"id":27,"href":"/docs/tools/teddycloud/setup/dump-certs/esp32/","title":"ESP32","section":"Dump certificates","content":" ESP32 # You can extract the flash memory via the debug port of the box and the esptool. Keep your backup! Please use a recent version of esptool. (\u0026gt;v4.4) Please connect the jumper J100 (Boot) and reset the box to put it into the required UARTmode. Connect your 3.3V UART to J103 (TxD, RxD, GND).\nIf you\u0026rsquo;re unsure in which mode the ESP32 is starting:\nNormal startup mode # LED blinking green, startup sound is played, Serial output:\nESP-ROM:esp32s3-20210327 Build:Mar 27 2021 rst:0x1 (POWERON),boot:0x8 (SPI_FAST_FLASH_BOOT) SPIWP:0xee mode:DIO, clock div:1 load:0x3fcd0108,len:0x118 load:0x403b6000,len:0xb90 load:0x403ba000,len:0x27f4 entry 0x403b61c4 + gibberish Download mode # LED is off, no sound, Serial output:\nESP-ROM:esp32s3-20210327 Build:Mar 27 2021 rst:0x1 (POWERON),boot:0x0 (DOWNLOAD(USB/UART0)) waiting for download Beware, if the serial monitor is open it will block esptool.py from accessing the esp. If you get a \u0026ldquo;BROWNOUT_RST\u0026rdquo; check your power supply / battery. \u0026ldquo;SPI_FAST_FLASH_BOOT\u0026rdquo; indicates a boot without the J100 jumper.\nBrowser based # You can use the build in ESP32 box flashing tool in the webinterface of teddyCloud to backup your box with \u0026ldquo;Read ESP32\u0026rdquo;.\nClick on [Read Flash]\nIf the flash is read sucessfully, you can download the unpatched firmware.\n(Optionally as you can do it automatically at the end of the flashing process!)\nAfter that you can manually extract the certificates. You can either do that with the teddycloud executable on your computer or you may do it via the docker shell docker exec -it \u0026lt;container-name\u0026gt; bash.\n# Please check the filename of your backup # Be sure you are in the TeddyCloud directory # cd /teddycloud/ # just for docker mkdir certs/client/\u0026lt;mac\u0026gt; teddycloud --esp32-extract data/firmware/ESP32_\u0026lt;mac\u0026gt;.bin --destination certs/client/\u0026lt;mac\u0026gt; Please check the filename of the extracted certs, especially the case! Change them to lowercase if they are uppercase.\nmv certs/client/\u0026lt;mac\u0026gt;/CLIENT.DER certs/client/\u0026lt;mac\u0026gt;/client.der mv certs/client/\u0026lt;mac\u0026gt;/PRIVATE.DER certs/client/\u0026lt;mac\u0026gt;/private.der mv certs/client/\u0026lt;mac\u0026gt;/CA.DER certs/client/\u0026lt;mac\u0026gt;/ca.der For your first Toniebox setup with TeddyCloud, copy the certificates into the base client certificates directory. TeddyCloud uses these certificates to authenticate with the official Tonies Cloud, allowing content to be downloaded without Toniebox interaction (e.g., when you click \u0026lsquo;Download\u0026rsquo; on a Tonie in the GUI).\ncp certs/client/\u0026lt;mac\u0026gt;/client.der certs/client/client.der cp certs/client/\u0026lt;mac\u0026gt;/private.der certs/client/private.der cp certs/client/\u0026lt;mac\u0026gt;/ca.der certs/client/ca.der Be sure, that the dump is okay and you are able to extract the certificates.\nPlease continue with flash CA step for the ESP32\nLegacy # # extract firmware esptool.py -b 921600 read_flash 0x0 0x800000 tb.esp32.bin # extract certficates from firmware mkdir certs/client/esp32 mkdir certs/client/\u0026lt;mac\u0026gt; teddycloud --esp32-extract tb.esp32.bin --destination certs/client/esp32 # Copy box certificates to teddyCloud cp certs/client/esp32/CLIENT.DER certs/client/\u0026lt;mac\u0026gt;/client.der cp certs/client/esp32/PRIVATE.DER certs/client/\u0026lt;mac\u0026gt;/private.der cp certs/client/esp32/CA.DER certs/client/\u0026lt;mac\u0026gt;/ca.der # In case of first Toniebox setup for TeddyCloud cp certs/client/\u0026lt;mac\u0026gt;/client.der certs/client/client.der cp certs/client/\u0026lt;mac\u0026gt;/private.der certs/client/private.der cp certs/client/\u0026lt;mac\u0026gt;/ca.der certs/client/ca.der # Copy certificates to temporary dir mkdir certs/client/esp32-fakeca cp certs/client/esp32/CLIENT.DER certs/client/esp32-fakeca/ cp certs/client/esp32/PRIVATE.DER certs/client/esp32-fakeca/ cp certs/server/ca.der certs/client/esp32-fakeca/CA.DER Be sure, that the dump is okay and you are able to extract the certificates.\nPlease continue with flash CA step for the ESP32\n"},{"id":28,"href":"/docs/tools/teddycloud/setup/flash-ca/esp32/","title":"ESP32","section":"Flash replacement CA","content":" ESP32 # Browser based # With teddyCloud you can also write a new image with your custom CA and a hostname/IP so the box connects to teddyCloud. If you have a Fritzbox you can set it to tc.fritz.box (see CC3200 how to configure the hostname on your Fritzbox), if not set it to the IP of teddyCloud.\nCheck, that your backup of your flash is okay and you were able to extract the certificates.\nIf you successfully read or load the flash of your Toniebox, the patching step is shown. Enter the hostname/ip of your teddyCloud instance. You can now also enter the WiFi credentials. To proceed click [Patch].\nAfter the flash is patched, you can proceed with the actuall flashing. Till this step nothing happens to your Toniebox.\nTo flash the patched firmware on your Toniebox, disconnect your Toniebox first from your powersource, click [Flash ESP32], confirm the dialog and immediatly connect to powersource again.\nIf the flashing was successful, you can download the unpatched and patched Firmware for your backup.\nYou can now also extract and place the certificates automatically.\nLegacy # Replace the original CA within your flash dump with esptool.\n# copy firmware backup cp tb.esp32.bin tb.esp32.fakeca.bin # inject new CA into firmware teddycloud --esp32-inject tb.esp32.fakeca.bin --source certs/client/esp32-fakeca # modify IP/hostname (optional) teddycloud --esp32-hostpatch tb.esp32.fakeca.bin --hostname \u0026lt;YOUR-IP/HOST\u0026gt; # flash firmware with new CA esptool.py -b 921600 write_flash 0x0 tb.esp32.fakeca.bin Reassamble your Toniebox again. If you already set the teddyCloud hostname, you can skip the DNS step for the ESP32, if not continue with DNS step for the ESP32.\nYour Toniebox should now be able to connect to your teddyCloud. Do a freshnesscheck and check if the box appears in the Toniebox management.\n"},{"id":29,"href":"/docs/wiki/cc3200/firmware-layout/","title":"Firmware layout","section":"CC3200","content":" Important Toniebox firmware files # File Description /cert/ca.der Contains the Certificate Authority to check the https connection for the api /cert/private.der Private key of the box, don\u0026rsquo;t share, it is used to identificate agains the cloud /cert/client.der Public key of the box, don\u0026rsquo;t share /sys/mcuimg.bin Original bootloader /sys/mcuimg1.bin First original firmware slot /sys/mcuimg2.bin Second original firmware slot /sys/mcuimg3.bin Third original firmware slot /sys/mcubootinfo.bin Decides which firmware slot to boot Analysing the Toniebox firmware image format # The Toniebox uses the image structure just like in the cc3200-sdk from ti. So from to-sdl/1.5.0/flc/flc.h see the following header:\n#ifndef FAST_BOOT #define IMG_BOOT_INFO \u0026#34;/sys/mcubootinfo.bin\u0026#34; #define IMG_FACTORY_DEFAULT \u0026#34;/sys/mcuimg1.bin\u0026#34; #define IMG_USER_1 \u0026#34;/sys/mcuimg2.bin\u0026#34; #define IMG_USER_2 \u0026#34;/sys/mcuimg3.bin\u0026#34; #else #define IMG_BOOT_INFO \u0026#34;/sys/mcureserved.bin\u0026#34; #define IMG_USER_1 \u0026#34;/sys/mcuimg.bin\u0026#34; #define IMG_USER_2 \u0026#34;/sys/mcuflpatch.bin\u0026#34; #endif /****************************************************************************** Image status *******************************************************************************/ #define IMG_STATUS_TESTING 0x12344321 #define IMG_STATUS_TESTREADY 0x56788765 #define IMG_STATUS_NOTEST 0xABCDDCBA /****************************************************************************** Active Image *******************************************************************************/ #define IMG_ACT_FACTORY 0 #define IMG_ACT_USER1 1 #define IMG_ACT_USER2 2 As we can see they are using 4 images. First one is the mcubootinfo.bin. Next one is the mcuimg1.bin and the next two images are indented to be used for OTA updates while the first one is inteded to be the factory reset/default image kind of backup.\nFormat of Toniebox Bootinfo reversed with radare2 # Let\u0026rsquo;s check the mcubootinfo.bin first, so open it with radare2.\n% r2 mcubootinfo.bin -- Run your own r2 scripts in awk using the r2awk program. [0x00000000]\u0026gt; x - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00000000 02d8 0320 badc cdab ffff ffff ffff ffff ... ............ 0x00000010 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000020 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000030 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000040 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000050 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000060 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000070 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000080 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x00000090 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x000000a0 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x000000b0 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x000000c0 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x000000d0 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x000000e0 ffff ffff ffff ffff ffff ffff ffff ffff ................ 0x000000f0 ffff ffff ffff ffff ffff ffff ffff ffff ................ [0x00000000]\u0026gt; As we can see it is only a 8 byte big file.\n% ls -lisa mcubootinfo.bin 8632122446 8 -rw-r--r-- 1 kai staff 8 18 Feb 22:35 mcubootinfo.bin First of all we need to find the correct matches for the defines IMG_STATUS_TESTING, IMG_STATUS_TESTREADY, IMG_STATUS_NOTEST. Remember ARM is little endian based, that means 0xABCDDCBA will become 0xBADCCDAB in our binary.\n% r2 mcubootinfo.bin -- A C program is like a fast dance on a newly waxed dance floor by people carrying razors - Waldi Ravens [0x00000000]\u0026gt; /x badccdab Searching 4 bytes in [0x0-0x8] hits: 1 0x00000004 hit4_0 badccdab [0x00000000]\u0026gt; And of course we get a macht for this byte. So in this case we will boot our image in NOTEST mode. The selected Image is 0x02 beacuse the first byte is read from the bootloader due to flc.c:\n[0x00000000]\u0026gt; x 4 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00000000 02d8 0320 So agian we need to rememeber it is little endian and it is 4 byte aligned so only 0x02 is used, the other bytes seen should be just garbage due to the 4 byte alignment.\nExamples for other modes an images can look like this:\nTESTREADY:\n- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00000000 02d8 0320 6587 7856 TESTING mit Image 0x01:\n- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00000000 01d8 0320 2143 3412 Format of Toniebox OFW Image reversed with radare2 # First of all let\u0026rsquo;s start with the interesting informations at the end of the files.\n% r2 mcuimg2.bin -- A git pull a day keeps the segfault away [0x00000000]\u0026gt; sG [0x000266e6]\u0026gt; s -2 [0x000266e4]\u0026gt; x -220 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00026608 0300 0000 4555 5f56 332e 302e 365f 4246 ....EU_V3.0.6_BF 0x00026618 312d 3000 4555 5f56 332e 302e 365f 7374 1-0.EU_V3.0.6_st 0x00026628 6162 6c65 5f62 7261 6e63 6800 0500 acbe able_branch..... 0x00026638 0000 0000 bb1b 4c5e 0000 0000 6161 3232 ......L^....aa22 0x00026648 6236 3200 3138 2046 6562 2031 383a 3135 b62.18 Feb 18:15 0x00026658 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026668 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026678 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026688 0001 0200 0100 010d 0000 0000 0000 0000 ................ 0x00026698 0200 0000 0000 0000 0500 acbe 3131 6661 ............11fa 0x000266a8 3362 3832 3733 6237 6530 6439 3837 3131 3b8273b7e0d98711 0x000266b8 3566 6136 6263 3630 3031 6131 6166 3163 5fa6bc6001a1af1c 0x000266c8 6339 3433 3562 3330 3338 3831 3132 3436 c9435b3038811246 0x000266d8 6232 3030 3663 6565 6539 3866 b2006ceee98f f[0x000266e4]\u0026gt; It seems we have a creation date, a version number and an hash as well as an git shorthash in the file end. Let\u0026rsquo;s proof the hash algorithm, assuming we have sha256 because of the given length.\n% r2 mcuimg2.bin -- Finnished a beer [0x00000000]\u0026gt; sG [0x000266e6]\u0026gt; s -2 [0x000266e4]\u0026gt; x -160 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00026644 6161 3232 6236 3200 3138 2046 6562 2031 aa22b62.18 Feb 1 0x00026654 383a 3135 0000 0000 0000 0000 0000 0000 8:15............ 0x00026664 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026674 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026684 0000 0000 0001 0200 0100 010d 0000 0000 ................ 0x00026694 0000 0000 0200 0000 0000 0000 0500 acbe ................ 0x000266a4 3131 6661 3362 3832 3733 6237 6530 6439 11fa3b8273b7e0d9 0x000266b4 3837 3131 3566 6136 6263 3630 3031 6131 87115fa6bc6001a1 0x000266c4 6166 3163 6339 3433 3562 3330 3338 3831 af1cc9435b303881 0x000266d4 3132 3436 6232 3030 3663 6565 6539 3866 1246b2006ceee98f [0x000266e4]\u0026gt; s 0 [0x00000000]\u0026gt; ph sha256 0x000266a4 11fa3b8273b7e0d987115fa6bc6001a1af1cc9435b3038811246b2006ceee98f Rocks, seems that we have found everything to calculate an valid toniebox hash by our own. So we can found the following ofsets, relativly to EOF:\nfrom -160 to -153 the git shorthash from -152 to -140 the creation date from -64 to EOF the SHA256 hash of the file Unfortunately the version string isn\u0026rsquo;t so fix and differs in it\u0026rsquo;s length see 3.0.6 for example in comparison to version 3.0.7. and 3.0.8\n% r2 mcuimg2.bin -- Documentation is for weak people. [0x00000000]\u0026gt; sG [0x000266e6]\u0026gt; s -2 [0x000266e4]\u0026gt; x -220 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00026608 0300 0000 4555 5f56 332e 302e 365f 4246 ....EU_V3.0.6_BF 0x00026618 312d 3000 4555 5f56 332e 302e 365f 7374 1-0.EU_V3.0.6_st 0x00026628 6162 6c65 5f62 7261 6e63 6800 0500 acbe able_branch..... 0x00026638 0000 0000 bb1b 4c5e 0000 0000 6161 3232 ......L^....aa22 0x00026648 6236 3200 3138 2046 6562 2031 383a 3135 b62.18 Feb 18:15 0x00026658 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026668 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026678 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00026688 0001 0200 0100 010d 0000 0000 0000 0000 ................ 0x00026698 0200 0000 0000 0000 0500 acbe 3131 6661 ............11fa 0x000266a8 3362 3832 3733 6237 6530 6439 3837 3131 3b8273b7e0d98711 0x000266b8 3566 6136 6263 3630 3031 6131 6166 3163 5fa6bc6001a1af1c 0x000266c8 6339 3433 3562 3330 3338 3831 3132 3436 c9435b3038811246 0x000266d8 6232 3030 3663 6565 6539 3866 b2006ceee98f f[0x000266e4]\u0026gt; % r2 mcuimg1.bin -- Select your character: RBin Wizard, Master Anal Paladin, or Assembly Warrior [0x00000000]\u0026gt; sG [0x0002841a]\u0026gt; s -2 [0x00028418]\u0026gt; x -220 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x0002833c 0100 0000 0002 0000 5044 5f56 332e 302e ........PD_V3.0. 0x0002834c 372d 3000 5044 5f56 332e 302e 375f 7374 7-0.PD_V3.0.7_st 0x0002835c 6162 6c65 5f62 7261 6e63 6800 0500 acbe able_branch..... 0x0002836c 0000 0000 33a2 c75f 0000 0000 3339 6133 ....3.._....39a3 0x0002837c 6166 3700 3032 2044 6563 2031 353a 3138 af7.02 Dec 15:18 0x0002838c 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x0002839c 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x000283ac 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x000283bc 0001 0200 0100 010e 0000 0000 0000 0000 ................ 0x000283cc 0300 0000 0000 0000 0500 acbe 6233 3565 ............b35e 0x000283dc 3665 3233 6238 3539 6662 3332 6565 3930 6e23b859fb32ee90 0x000283ec 3838 6562 6231 6130 3961 6165 3363 6163 88ebb1a09aae3cac 0x000283fc 3163 3933 3032 3365 3636 6166 6635 3336 1c93023e66aff536 0x0002840c 6463 6561 3664 3564 3439 3862 dcea6d5d498b [0x00028418]\u0026gt; % r2 mcuimg3.bin -- This is an unregistered copy. [0x00000000]\u0026gt; sG [0x00027cab]\u0026gt; s -2 [0x00027ca9]\u0026gt; x -220 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x00027bcd 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00027bdd 0000 00aa aaaa aa45 555f 5633 2e30 2e38 .......EU_V3.0.8 0x00027bed 2d30 0033 2e30 2e38 5f45 5500 0500 acbe -0.3.0.8_EU..... 0x00027bfd 0000 0000 fb19 875f 0000 0000 3333 6434 ......._....33d4 0x00027c0d 6633 6100 3134 204f 6374 2031 373a 3332 f3a.14 Oct 17:32 0x00027c1d 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00027c2d 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00027c3d 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00027c4d 0001 0200 0100 010e 0000 0000 0000 0000 ................ 0x00027c5d 0200 0000 0000 0000 0500 acbe 6632 6565 ............f2ee 0x00027c6d 3433 3365 3036 3330 6135 3632 3433 3234 433e0630a5624324 0x00027c7d 3237 3764 3736 3363 6533 6337 6165 6131 277d763ce3c7aea1 0x00027c8d 3633 3061 3961 3037 6134 6239 3831 3766 630a9a07a4b9817f 0x00027c9d 3039 3535 3066 3235 6665 3536 09550f25fe56 [0x00027ca9]\u0026gt; But every version string seems to have the pattern _V included, lets try to build an regular expression for it and every version string is followed by the bytes 0500 acbe so far, we could use that to find an start point for our search.\nAnother very interessting observation are the bytes 0xBEAC0005 at the end of the file just right before the SHA256 hash.\nFormat of Toneibox original bootloader reversed with radare2 # % r2 mcuimg.bin -- AHHHHH!!!! ASSEMBLY CODE!!!!!! HOLD ME I\u0026#39;M SCARED!!!!!!!!!! [0x00000000]\u0026gt; sG [0x000051de]\u0026gt; s -2 [0x000051dc]\u0026gt; x -250 - offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 0x000050e2 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x000050f2 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00005102 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00005112 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00005122 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x00005132 0000 0000 0000 0000 0000 0000 0000 93c7 ................ 0x00005142 0320 b4c7 0320 fac7 0320 e1c7 0320 1dc7 . ... ... ... .. 0x00005152 0320 a6c7 0320 a1c7 0320 8fc7 0320 c6c7 . ... ... ... .. 0x00005162 0320 d9c7 0320 99c7 0320 0500 acbe 0000 . ... ... ...... 0x00005172 0000 456d c957 0000 0000 3039 6336 3337 ..Em.W....09c637 0x00005182 3400 4672 6920 5365 7020 2032 2031 343a 4.Fri Sep 2 14: 0x00005192 3135 3a30 3120 4345 5354 2032 3031 3600 15:01 CEST 2016. 0x000051a2 0000 0000 0000 0000 0000 0000 0000 0000 ................ 0x000051b2 0000 0000 0000 0000 0000 0000 0000 0001 ................ 0x000051c2 0200 0100 0106 0000 0000 100e 0000 0000 ................ 0x000051d2 0000 2c01 1000 0500 acbe ..,....... [0x000051dc]\u0026gt; So as we can see we get the same EOF indicator as within the mcuimgX.bin images. But it seems like there is no hash stored within the bootloader itself. Won\u0026rsquo;t make sense at all, because the is no bootstage that could verify the correct hash of the BL. But we get an git shorthash and an timestamp again.\nPython tool for extracting all this information by your own # During the reversing of all this cool there was a python tool developped for extracting all this information by your own if you are afraid for hex editors. It has some nice features like recursive mode, csv and json export so you can extract this informations from any folder you like. For the toniebox users out there who have a big collection of firmware images :)\nFind the tool here: Firmware Information Extractor\nIt is almost self explaining and has a help menue:\n%% ./firmware_info.py -r testfolder/foo Filename: testfolder/foo/mcuimg2.bin Firmware Version: EU_V3.0.6_BF1-0 Firmware Version: EU_V3.0.6_stable_branch Creation Date: 18 Feb 18:15 Read SHA256: 11fa3b8273b7e0d987115fa6bc6001a1af1cc9435b3038811246b2006ceee98f Calculated SHA256: 11fa3b8273b7e0d987115fa6bc6001a1af1cc9435b3038811246b2006ceee98f GIT Shorthash: aa22b62 Filename: testfolder/foo/mcuimg3.bin Firmware Version: EU_V3.0.8-0 Firmware Version: 3.0.8_EU Creation Date: 14 Oct 17:32 Read SHA256: f2ee433e0630a5624324277d763ce3c7aea1630a9a07a4b9817f09550f25fe56 Calculated SHA256: f2ee433e0630a5624324277d763ce3c7aea1630a9a07a4b9817f09550f25fe56 GIT Shorthash: 33d4f3a Filename: testfolder/foo/mcuimg1.bin Firmware Version: PD_V3.0.7-0 Firmware Version: PD_V3.0.7_stable_branch Creation Date: 02 Dec 15:18 Read SHA256: b35e6e23b859fb32ee9088ebb1a09aae3cac1c93023e66aff536dcea6d5d498b Calculated SHA256: b35e6e23b859fb32ee9088ebb1a09aae3cac1c93023e66aff536dcea6d5d498b GIT Shorthash: 39a3af7 % ./firmware_info.py -jr testfolder/ Found bootinfo file skipped for JSON-Output: Slot: [b\u0026#39;\\x02\u0026#39;] Mode: [0] [ { \u0026#34;Filename\u0026#34;: \u0026#34;testfolder/mcuimg2.bin\u0026#34;, \u0026#34;FWInfo\u0026#34;: [ \u0026#34;EU_V3.0.6_BF1-0\u0026#34;, \u0026#34;EU_V3.0.6_stable_branch\u0026#34; ], \u0026#34;creationDate\u0026#34;: \u0026#34;18 Feb 18:15\u0026#34;, \u0026#34;git shorthash\u0026#34;: \u0026#34;aa22b62\u0026#34;, \u0026#34;sha256\u0026#34;: \u0026#34;11fa3b8273b7e0d987115fa6bc6001a1af1cc9435b3038811246b2006ceee98f\u0026#34;, \u0026#34;calculatedHash\u0026#34;: \u0026#34;11fa3b8273b7e0d987115fa6bc6001a1af1cc9435b3038811246b2006ceee98f\u0026#34; }, { \u0026#34;Filename\u0026#34;: \u0026#34;testfolder/mcuimg3.bin\u0026#34;, \u0026#34;FWInfo\u0026#34;: [ \u0026#34;EU_V3.0.8-0\u0026#34;, \u0026#34;3.0.8_EU\u0026#34; ], \u0026#34;creationDate\u0026#34;: \u0026#34;14 Oct 17:32\u0026#34;, \u0026#34;git shorthash\u0026#34;: \u0026#34;33d4f3a\u0026#34;, \u0026#34;sha256\u0026#34;: \u0026#34;f2ee433e0630a5624324277d763ce3c7aea1630a9a07a4b9817f09550f25fe56\u0026#34;, \u0026#34;calculatedHash\u0026#34;: \u0026#34;f2ee433e0630a5624324277d763ce3c7aea1630a9a07a4b9817f09550f25fe56\u0026#34; }, { \u0026#34;Filename\u0026#34;: \u0026#34;testfolder/mcuimg1.bin\u0026#34;, \u0026#34;FWInfo\u0026#34;: [ \u0026#34;PD_V3.0.7-0\u0026#34;, \u0026#34;PD_V3.0.7_stable_branch\u0026#34; ], \u0026#34;creationDate\u0026#34;: \u0026#34;02 Dec 15:18\u0026#34;, \u0026#34;git shorthash\u0026#34;: \u0026#34;39a3af7\u0026#34;, \u0026#34;sha256\u0026#34;: \u0026#34;b35e6e23b859fb32ee9088ebb1a09aae3cac1c93023e66aff536dcea6d5d498b\u0026#34;, \u0026#34;calculatedHash\u0026#34;: \u0026#34;b35e6e23b859fb32ee9088ebb1a09aae3cac1c93023e66aff536dcea6d5d498b\u0026#34; } ] "},{"id":30,"href":"/docs/wiki/cc3200/firmware-list/","title":"Firmware list","section":"CC3200","content":" List of known firmware versions # Normal firmwares # Version Branch Creation Date Year git short hash Comments hash PD_V3.1.0_BF5-0 master 15 Feb 13:41 b6e1515 5a25756293f7263013ad70f875ed35412cae1b1d6662e5860bf36b81292a807e PD_V3.1.0_BF4-0 master 27 May 10:33 2021 d8481fc ea9dee23fe4f9967cb0ca232a31734d059fd0c4591c95e53722188b86ed2dd44 EU_V3.1.0_BF2-0 3.1.0_BF2_EU 06 May 20:21 2021 2640c1f 36ef76a6937a128d3bf125d7f08c0c120387e44f7b0d346203a7171f828dafbe EU_V3.1.0_BF1-0 3.1.0_BF1_EU 30 Mar 23:49 2021 e73e1fb e871f228e93563981f7dc433b11b4a09f90b64b0879909b19f12bf2083ad8fc3 EU_V3.0.8-0 3.0.8_EU 14 Oct 17:32 2020 33d4f3a f2ee433e0630a5624324277d763ce3c7aea1630a9a07a4b9817f09550f25fe56 EU_V3.0.7-0 EU_V3.0.7_stable_branch 17 Jul 09:49 2020 ba7a7b5 14ae54febb0f08cc055e64a0ca29243fa5ce51b5d7f9ce2aab3a5671d276be3b PD_V3.0.6_BF6-0 3.0.6_PD_BF6 19 Jun 18:08 2020 6fee560 be2918f9ab17f813c7c6aef553c929ae89d48f4621f5db1843851af4aa8a8ddb PD_V3.0.6_BF1-0 PD_V3.0.6_stable_branch 27 Apr 14:27 2020 af9d2fb fd781d30e9cae3f5ea562e2752b491b59f1e18fa3694bfb148a59698ee08bef7 EU_V3.0.6_BF1-0 EU_V3.0.6_stable_branch 18 Feb 18:15 2020 aa22b62 11fa3b8273b7e0d987115fa6bc6001a1af1cc9435b3038811246b2006ceee98f EU_V3.0.5_BF1-0 EU_V3.0.5_stable_branch 05 Dec 16:07 2019 880c667 be16f7e3107f1e47a106a8cb0c28e43ffa7cde01ee909a5a22e4cebfa4fa99c5 EU_V3.0.5-0 EU_V3.0.5_stable_branch 13 Nov 17:47 2019 c041b2f 089a06b69b92d1b4389062e780fb0484d645c7d282ee9886391ea431fb5b857b 24 May 15:52 cf13516 78026fdd45ff5cfae374e056c88815aa8d0b4cd70012d31d21be439b86d1ea99 30 Nov 12:17 ef99190 266ff836930677257f9b63f1d499f3df81c713c88f345669c0bff0f8685842e6 31 Jan 12:22 b54a780 3cd31494852dd87214044d3dd361878f6b9008963cb3db05d54cdfba8e7ba89a 31 Aug 19:58 2da9d24 d032a38253223e03adb6b904da8ae7433780b6304bbdab66f135fd472da2247a 18 Jul 14:55 6c8c96b a9672b6c747f90286466d680ef2c8a0aeebff244b9169ccf96ff48ce127f3238 26 Jul 16:01 0930acd 71b0a665e9c97fedf351d3059ebbda21c8266d70915d49c945c1966dbf150ecc 04 May 16:24 1096f77 a0ffb8e424775cf132e7fd2236f516a7614c18f89560832eb1bb78a5f82040af Special firmwares # Version Branch Creation Date Year git short hash Comments hash Factory Image? 16abb09640ff6010af5b825c4a262b616b98f6006b23377ad3e510dabee5d4cf Demo firmwares # Version Branch Creation Date Year git short hash Comments hash EUD_V3.1.0-0 master 07 Jun 09:35 160deed EU Demobox Firmware 36a47e53498df52a4459bafa78f75a4f3418717144f85fd1fb06bf19e75a5ed8 EUD_V3.0.7-0 EUD_stable_branch 04 Dec 14:19 2020 75b4627 67fbe98d9d8dfb99e037590909ee4d5009b6677b26a79148aed5cbecee54bbce Oct 26 16:21 0e3009e UK Demobox Firmware eeca1bfff7baf9ebe73bddb6911333e25c708373e6499eec181749ffc9786391 Oct 24 16:00 2485fa1 UK Demobox Firmware 7510936b12cde75e9a389952437c6d8a2c07959620c8d00791eba9d72b6ea068 "},{"id":31,"href":"/docs/custom-firmware/cc3200/hackiebox-cfw/api/","title":"Hackiebox API","section":"Hackiebox CFW PoC","content":"This entry contains the api documentation.\nEndpoint /api/ajax # GET Parameter \u0026ldquo;cmd\u0026rdquo; as command name\nget-config - Sends the current config as JSON # Result # {\u0026#34;version\u0026#34;:2,\u0026#34;battery\u0026#34;:{\u0026#34;voltageFactor\u0026#34;:67690,\u0026#34;voltageChargerFactor\u0026#34;:71907,\u0026#34;minimalAdc\u0026#34;:2400,\u0026#34;sleepMinutes\u0026#34;:15},\u0026#34;buttonEars\u0026#34;:{\u0026#34;longPressMs\u0026#34;:1000,\u0026#34;veryLongPressMs\u0026#34;:10000},\u0026#34;wifi\u0026#34;:{\u0026#34;ssid\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;\u0026#34;}} get-dir Directory file listing # Parameters # dir # Contains the target directory path\nResult # {\u0026#34;files\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;CONTENT\u0026#34;,\u0026#34;size\u0026#34;:0,\u0026#34;time\u0026#34;:11942,\u0026#34;date\u0026#34;:20662,\u0026#34;dir\u0026#34;:true},{\u0026#34;name\u0026#34;:\u0026#34;revvox\u0026#34;,\u0026#34;size\u0026#34;:0,\u0026#34;time\u0026#34;:39661,\u0026#34;date\u0026#34;:20661,\u0026#34;dir\u0026#34;:true},{\u0026#34;name\u0026#34;:\u0026#34;initsd.crc\u0026#34;,\u0026#34;size\u0026#34;:5123,\u0026#34;time\u0026#34;:0,\u0026#34;date\u0026#34;:33,\u0026#34;dir\u0026#34;:false},{\u0026#34;name\u0026#34;:\u0026#34;hackiebox.config.json\u0026#34;,\u0026#34;size\u0026#34;:228,\u0026#34;time\u0026#34;:23491,\u0026#34;date\u0026#34;:20665,\u0026#34;dir\u0026#34;:false}]} get-file - Sends the specified file # Parameters # filepath # Contains the target file path\nstart (optional) # Ignore bytes until [start]\nlength (optional) # Read max [length] bytes\nResult # Raw filestream\nget-flash-file - Sends the specified file from flash # Parameters # filepath # Contains the target file path\nstart (optional) # Ignore bytes until [start]\nlength (optional) # Read max [length] bytes\nResult # Raw filestream\ncopy-file - Copy file to a different location (TBD) # Parameters # source # Full [source] file path\ntarget # Full [target] file path\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\nmove-file - Move file to a different location # Parameters # source # Full [source] file path\ntarget # Full [target] file path\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\ndelete-file - Delete file # Parameters # filepath # Full [filepath]\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\ndelete-flash-file - Delete flash file # Parameters # filepath # Full [filepath]\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\ncreate-dir - Create dir # Parameters # dir # Full [dir] file path\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\ncopy-dir - Copy dir to a different location (TBD) # Parameters # source # Full [source] file path\ntarget # Full [target] file path\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\nmove-dir - Move dir to a different location # Parameters # source # Full [source] dir path\ntarget # Full [target] dir path\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\ndelete-dir - Delete directory # Removes an empty directory\nParameters # dir # Full [dir]\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\nbox-power power related commands # Parameters # sub # Subcommand\nSubcommands # reset # Restarts the device\nhibernate # Goes into hibernation\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\nbox-battery battery related commands # Parameters # sub # Subcommand\nSubcommands # start-test # Starts a battery test (/revvox/batteryTest.csv)\nResult # 404 or { \u0026ldquo;success\u0026rdquo;: true }\nstats # Prints current battery stats\nResult # {\u0026ldquo;charging\u0026rdquo;:true,\u0026ldquo;low\u0026rdquo;:false,\u0026ldquo;critical\u0026rdquo;:false,\u0026ldquo;adcRaw\u0026rdquo;:3286,\u0026ldquo;voltage\u0026rdquo;:456,\u0026ldquo;testActive\u0026rdquo;:false,\u0026ldquo;testActiveMinutes\u0026rdquo;:0}\nbox-rfid RFID related commands # Parameters # sub # Subcommand\nSubcommands # uid # Sends uid information\nResult # {\u0026#34;active\u0026#34;:true,\u0026#34;uid\u0026#34;:\u0026#34;13:37:13:37:13:37:13:37\u0026#34;,\u0026#34;uidRaw\u0026#34;:[55,19,55,19,55,19,55,19]} memory # extracts tags memory (8 blocks a 4 bytes, SLIX-L)\nResult # [15,65,137,198,147,188,12,253,23,109,30,171,162,104,124,119,133,224,173,140,118,106,154,234,71,28,135,255,157,122,36,136] cli - Command line interface # Parameters # cli # Command, type \u0026ldquo;help\u0026rdquo; for more details.\nResult # Raw command line result. Example for help\n# help Help: i2c [-read] [-write] -a/ddress \u0026lt;value\u0026gt; -r/egister \u0026lt;value\u0026gt; [-v/alue \u0026lt;value\u0026gt;] [-l/ength \u0026lt;1\u0026gt;] [-o/utput \u0026lt;b\u0026gt;] Access I2C beep [-m/idi-id \u0026lt;60\u0026gt;] [-l/ength \u0026lt;200\u0026gt;] Beep with build-in DAC synthesizer help Show this screen Endpoint /api/upload/* # Standard POST file upload. Attention, only one upload at once supported or you may get corrupt files!\nParameters # filepath # Specifies the target file path.\nfilesize # (Flash file upload only)\noverwrite # Enable to allow overwriting files\nstart (optional) # Skip bytes until [start]\n/api/upload/file # Upload file to sd card.\n/api/upload/flash-file # Upload file to flash\n"},{"id":32,"href":"/docs/custom-firmware/cc3200/hackiebox-cfw/","title":"Hackiebox CFW PoC","section":"CC3200","content":" Hackiebox Proof of Concept Custom Firmware for CC3200 # Links # GitHub Releases "},{"id":33,"href":"/docs/wiki/cc3200/hardware/","title":"Hardware","section":"CC3200","content":" Pictures (r1) # Board # Detail pictures see iFixit Teardown\nParts # Processor TI CC3200 # Technical Information Cortex-M4 arm7e-m thumb\nI suggest to get a CC3200 Launchpad for first contact.\nVarious useful pins (SOP2, TCK, TMS, GND, RST, GND, RX0, TX0) are available through the onboard debug pins.\nFlash 4MB ISSI IS25LQ032B # Firmware is stored in a TI propiertery FatFS but can easily be read over the RX/TX lines of the mainboard when the CC3200 is in flash-mode.\nAudio DAC TI TLV320DAC3100 # I2C address should be 0x18.\nRFID Reader TI TRF7962A # Reading MiFare Classic is not possible without using the chips direct mode which means more work. 1.2 http://www.ti.com/lit/an/sloa248b/sloa248b.pdf http://www.ti.com/tool/TRF796X_TRF7970X_MIFARE_12_2013\nFirmware TRF7970ABP: http://www.ti.com/lit/zip/sloc297 Example Salae Logic SPI http://www.ti.com/lit/zip/sloc240\nAcceleration Sensor NXP MMA8451Q # Arduino Library exists. I2C address is 0x1D\nRGB LEDs # Green PIN 21 (SOP2) # Red PIN 19 (TCK) # Blue PIN 17 (TDO) # "},{"id":34,"href":"/docs/wiki/general/internal-audio-files/","title":"Internal audio files","section":"General","content":" Internal audio files # Overview # Folder Language 00000000 English (GB) 00000001 German 00000002 English (USA) 00000003 French Language specific files # English (GB) # German # Folder Language File Animal Short Long 00000001 DE 00000000 Jingle Startup sound 00000001 DE 00000001 Tada 00000001 DE 00000002 Tadum MhhMhhh 00000001 DE 00000003 Tadududu Low battery? 00000001 DE 00000004 Empty 00000001 DE 00000005 Empty 00000001 DE 00000006 Clingclong Audiofile finished 00000001 DE 00000007 Offlinemode on Der Offlinemodus ist jetzt aktiviert 00000001 DE 00000008 Offlinemode off Der Offlinemodus wurde beendet 00000001 DE 00000009 Low battery Ohhoh, mein Akku ist leer und ich muss abschalten. Bitte stell mich auf die Ladestation. 00000001 DE 0000000A Koalabär Ohh oh, das hat nicht geklappt. Ich befinde mich gerade im Offlinemodus. Weitere Infos erhälts du unter dem Codewort Koalabär 00000001 DE 0000000B Installation Hallo, nicht erschrecken. Hier spricht deine Toniebox. Bevor es losgeht, brauche ich Hilfe bei der Installation. 00000001 DE 0000000C Empty 00000001 DE 0000000D Charger Bitte lass mich noch auf der Ladestation 00000001 DE 0000000E Limit Hallo, du hast dein Hörspiellimit für heute erreicht. 00000001 DE 0000000F Network Ohh oh, das Herunterladen wurde leider unterbrochen. Bitte überprüfe ob du noch mit dem Internet verbunden bist. 00000001 DE 00000010 Box ready Ohh-ja, jetzt bin ich bereit für die Tonies. Viel Spaaaß! 00000001 DE 00000011 Schildkröte Ohh oh, ich habe keine Verbindung zum Internet. Weitere Infos erhälst du unter dem Codewort Schildkröte 00000001 DE 00000012 Murmeltier Ohh oh, ein Fehler. Codewort Murmeltier 00000001 DE 00000013 Password Ohh oh, das hat nicht geklappt. Dein Passwort scheint wohl falsch zu sein. 00000001 DE 00000014 Igel Ohh oh, ein Fehler. Codewort Igel 00000001 DE 00000015 Ameise Ohh oh, ein Fehler. Codewort Ameise 00000001 DE 00000016 Erdmännchen Ohh oh, ein Fehler. Codewort Erdmännchen 00000001 DE 00000017 Eule Ohh oh, ein Fehler. Codewort Eule 00000001 DE 00000018 Elefant Ohh oh, ein Fehler. Codewort Elefant English (USA) # French # "},{"id":35,"href":"/docs/wiki/general/known-problems/","title":"Known problems","section":"General","content":" Toniebox related # Box has a wifi password # Checks # Does \u0026ldquo;www.wipy.io\u0026rdquo; or \u0026ldquo;TeamRevvoX\u0026rdquo; work? You may remove the password by connecting to the Box\u0026rsquo; WiFi, go to http://192.168.1.1/main.html \u0026ldquo;Device Config\u0026rdquo; - \u0026ldquo;Access Point config\u0026rdquo;, set the security type to \u0026ldquo;Open\u0026rdquo; and hit apply. Now the password should be removed.\nBox only works on the charger # Checks # Battery plugged in? Battery defect? Hitting the box for skipping tracks doesn\u0026rsquo;t work # Checks # Disabled in the cloud? Other? Box gets (very) hot on the charger, works on battery (if still charged) # Checks # Diode near the power connector defect? (D4) Reason # The box was plugged into power supply with more than 9V.\nBox detects no figures # Checks # XTAL X2 defect? Weak WiFi Signal # Checks # Box doesn\u0026rsquo;t have a voice, only sounds # Checks # microSD defect? Blinks red when woken up or a tonie is placed on # Checks # microSD defect? cc3200tool related # raise CC3200Error(\u0026ldquo;rx csum failed\u0026rdquo;) # Checks # Ground ok? Toniebox is getting enought power (an UART 3.3V might not be an apropiate power source for it.) Solutions # Power the toniebox via its battery and/or charger and disconnect the 3.3V connection. Use shorter wires (Jumpers and/or USB) Use a different USB port (possibly without an USB-hub) read_all_files only dumps a few files / list_filesystem has no filenames # If list_filesystem doesn\u0026rsquo;t show the filenames for several or all files on the flash, the tool cannot dump the files automatically with the command read_all_files.\nSolutions # Dump every important file one by one using the read_file command. You may need to create a cert/ and sys/ subdirectory in your target dir. cc3200tool -p COM3 read_file /cert/ca.der cert/ca.der read_file /cert/private.der cert/private.der read_file /cert/client.der cert/client.der read_file /sys/mcuimg.bin sys/mcuimg.bin read_file /sys/mcuimg1.bin sys/mcuimg1.bin read_file /sys/mcuimg2.bin sys/mcuimg2.bin read_file /sys/mcuimg3.bin sys/mcuimg3.bin read_file /sys/mcubootinfo.bin sys/mcubootinfo.bin "},{"id":36,"href":"/docs/wiki/cc3200/microsd-compatibility/","title":"microSD compatibility","section":"CC3200","content":"Here you find a list of working microSD cards for the box. It seems to be very particular. Be sure you format your microSD with fat32.\nWorking # SanDisk # 128GB SanDisk Ultra microSDXC I 1 A1 64GB SanDisk Ultra microSDXC I 1 16GB SanDisk Ultra microSDXC I 1 8GB SanDisk EDGE microSDHC I 4 2GB SanDisk microSD 32GB Micron microSDHC I 1 32GB Perciron microSD (noname Aliexpress) Samsung # 512GB Samsung EVO Plus microSDXC UHS-I Class 10 U3 (MB-MC512KA/EU) Not Working # Samsung # 512GB SanDisk Ultra microSDXC I 1 Class 10 U1 A1 32GB Samsung EVO Plus microSDHC I 1 Intenso microSDHC 8GB Class 10 SD card extension # For convenience a SD extension cable can be used to place the card in a better accessible way. A 25 cm cable is recommend.\nYou can use both types of cables:\nmicroSD card – microSD card microSD card – SD card Cable modification # Out-of-the box the cable is not working because of the resistor between VDD (3.3 V) and CLK. The reason for that is unclear.\nIt is necessary to remove this resistor.\n"},{"id":37,"href":"/docs/wiki/cc3200/pinout/","title":"Pinout","section":"CC3200","content":" Pin ID Pin Name Toniebox usage Target Notes 01 GPIO10 SD_CLK SD 02 GPIO11 SD_CMD SD 03 GPIO12 I2C_SCL MMA + DAC 04 GPIO13 I2C_SDA MMA + DAC 05 GPIO14 GSPI_CLK RFID 06 GPIO15 GSPI_MISO RFID 07 GPIO16 GSPI_MOSI RFID 08 GPIO17 Charger Battery 2.4V when on charger 09 VDD_DIG1 10 VINIO1 11 FLASH_SPI_CLK 12 FLASH_SPI_DOUT 13 FLASH_SPI_DIN 14 FLASH_SPI_CS 15 GPIO22 MMA INT1 MMA 16 TDI (GPIO23) CS RFID 17 TDO (GPIO24) Blue LED LED 18 GPIO28 RFID IRQ RFID 19 TCK Red LED LED PWM? / SWD 20 TMS (GPIO29) SWD 21 SOP2 (GPIO25) Green LED LED 22 WLAN_XTAL_N 23 WLAN_XTAL_P 24 VDD_PLL 25 LDO_IN2 26 NC 27 NC 28 NC 29 ANTSEL1 30 ANTSEL2 31 RF_BG 32 nRESET 33 VDD_PA_IN 34 SOP1 35 SOP0 36 LDO_IN1 37 VIN_DCDC_ANA 38 DCDC_ANA_SW 39 VIN_DCDC_PA 40 DCDC_PA_SW_P 41 DCDC_PA_SW_N 42 DCDC_PA_OUT 43 DCDC_DIG_SW 44 VIN_DCDC_DIG 45 DCDC_ANA2_SW_P (GPIO31) 46 DCDC_ANA2_SW_N 47 VDD_ANA2 48 VDD_ABA1 49 VDD_RAM 50 GPIO00 I2S Data0 (DIN) DAC 51 RTC_XTAL_P 52 RTC_XTAL_N (GPIO32) 53 GPIO30 I2S ClockO (BCLK) DAC 54 VIN_IO2 55 GPIO01 DAC Headphone detection DAC+UART TX0 56 VDD_DIG2 57 GPIO02 BTN01 Ears RX0 / big ear 58 GPIO03 Power SD Low = Power on 59 GPIO04 BTN02 Ears small ear 60 GPIO05 ADC Battery Battery level analog pin 61 GPIO06 Power MMA + DAC High = Power on 62 GPIO07 DAC Reset / RFID EN DAC / RFID 10ns Low for Reset 63 GPIO08 I2S Frame Sync (WCLK) DAC 64 GPIO09 SD_D0 SD "},{"id":38,"href":"/docs/wiki/esp32/pinout/","title":"Pinout","section":"ESP32","content":" Pin ID Pin Name Toniebox usage Target Notes 01 LNA_IN 02 VDD3P3 03 VDD3P3 04 CHIP_PU 05 GPIO0 Boot J100 06 GPIO1 SS TRF7962A 07 GPIO2 MOSI TRF7962A 08 GPIO3 MISO TRF7962A 09 GPIO4 SCLK TRF7962A 10 GPIO5 I2C_SDA LIS + DAC 11 GPIO6 I2C_SCL LIS + DAC 12 GPIO7 button pressed or charger present wake up (1=no button/no charger) 13 GPIO8 ADC_charg R75/R72, 100kΩ/100kΩ divider (div 2) U300 LM3485, 5V buck, charger 14 GPIO9 ADC_Vbatt R57/R58, 100kΩ/33kΩ divider (div 4) right before U320 \u0026ldquo;BW93\u0026rdquo; boost? \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash; 15 GPIO10 DIN DAC3100 16 GPIO11 BCLK DAC3100 17 GPIO12 WCLK DAC3100 18 GPIO13 IRQ TRF7962A 19 GPIO14 IRQ LIS3DH 20 VDD3P3_RTC 21 XTAL_32K_P 22 XTAL_32K_N 23 GPIO17 Blue-LED LED 24 GPIO18 Green-LED LED 25 GPIO19 Red-LED LED 26 GPIO20 Ear left, big active low 27 GPIO21 Ear right, small active low 28 GPIO26 / SPICS1 RESET (active high) DAC3100 \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash; 29 VDD_SPI 30 SPIHD RS SPI flash via 100Ω 31 SPIWP WP SPI flash via 100Ω 32 SPICS0 SCS SPI flash via 22Ω 33 SPIHCLK SCK SPI flash via 22Ω 34 SPIQ SO SPI flash via 22Ω 35 SPID SI SPI flash via 22Ω 36 GPIO48 / SPICLK_N GPIO1 DAC3100 37 GPIO47 / SPICLK_P Power SD Low = Power on 38 GPIO33 DAT2 SD 39 GPIO34 DAT3 SD 40 GPIO35 CLK SD 41 GPIO36 DAT0 SD 42 GPIO37 DAT1 SD \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash; 43 GPIO38 CMD SD J102 44 MTCK TCK JTAG J102 45 MTDO TD0 JTAG J102 46 VDD3P3_CPU 47 MTDI TDI JTAG J102 48 MTMS TMS JTAG J102 49 U0TXD TX UART J103 50 U0RXD RX UART J103 51 GPIO45 Power LIS + DAC + Blue-LED High = Power on 52 GPIO46 J101 53 XTAL_N 54 XTAL_P 55 VDDA 56 VDDA "},{"id":39,"href":"/docs/tools/teddycloud/tecdoc/playlist-tap-json/","title":"Playlists (TAP)","section":"Technical Docs","content":" Playlist Feature (TAP files) # teddyCloud supports basic playlist handling. A playlist file (TAP) can be linked to multiple sources, as long as it is supported by ffmpeg. Please be aware: If you are adding TAF files, the chapters of them will get lost in the TAP!\nTAP files can be placed into library folder. The Tonies (from content folder) can then get assigned to any TAP file, just like it would be a normal TAF.\nTAP files usually looks like the following:\n{ \u0026#34;type\u0026#34;: \u0026#34;tap\u0026#34;, \u0026#34;audio_id\u0026#34;: 0, \u0026#34;filepath\u0026#34;: \u0026#34;lib://by/tapID/radio.taf\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Radio\u0026#34;, \u0026#34;files\u0026#34;: [ { \u0026#34;filepath\u0026#34;: \u0026#34;lib://by/audioID/1234567890.taf\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Hörspiel Tonie\u0026#34; }, { \u0026#34;filepath\u0026#34;: \u0026#34;lib://mp3/album/title.mp3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;A Song\u0026#34; }, { \u0026#34;filepath\u0026#34;: \u0026#34;http://nas.intranet/musiclibrary/album/song.mp3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Network Audio\u0026#34; } ] } Specification # Option Type Default Description type str tap Sets the type of playlist audio_id uint32 0 Sets the audio id if the file is cached. Set it to 0 to force recreating the cached file filepath str \u0026quot;\u0026quot; Sets a path of TAF, which will be produced by ffmpeg name str \u0026quot;\u0026quot; Sets the name of the playlist files array [] Define a list of audio files for this playlist files.filepath str \u0026quot;\u0026quot; Sets the path to audio resource (must be compatible to ffmpeg) files.name str \u0026quot;\u0026quot; Sets the name of the audio resource "},{"id":40,"href":"/docs/wiki/general/protocol-analysis/","title":"Protocol analysis","section":"General","content":" prod.de.tbs.toys # Basics # The communication is based on HTTPS (TLS over HTTP). The box authenticates with a client certificate (private.der/client.der) to the server. The cc3200 based boxed may use an outdated sha1 based algorithm that may lead to problems with modern OpenSSL versions.\nRequest # Every request contains a user-agent header with information about the current running firmware and the box\u0026rsquo; hardware. There may be additional headers such as a content-length or authoritation if needed.\nExample # Variable Description Example sp 8-digit-number hw 7-digit-number firmware-ts unix-timestamp 1640950635 box-color Box\u0026rsquo; color (only esp32) RoseRed cc3200 # GET https://prod.de.tbs.toys/%path% HTTP/1.1 Host: prod.de.tbs.toys User-Agent: TB/%firmware-ts% SP/%sp% HW/%hw% cc3235 # GET https://prod.de.tbs.toys/%path% HTTP/1.1 Host: prod.de.tbs.toys User-Agent: TB/%firmware-ts% SP/%sp% HW/%hw% esp32 # GET https://prod.de.tbs.toys/%path% HTTP/1.1 Host: prod.de.tbs.toys User-Agent: %box-color% TB/%firmware-ts% Response # Variable Description Example http-code http standard code 200 OK request-id 20-alphanumeric id Ff2n6tTjF-fJz5Ai-2Ts content-len integer for the content length 0 Example # HTTP/1.1 %http-code% Server: openresty Date: Mon, 30 Jan 2023 17:40:04 GMT Content-Length: %content-len% Connection: keep-alive cache-control: max-age=0, private, must-revalidate x-request-id: %request-id% Endpoints # v1-time (GET /v1/time) # Receive the time in unix time format. May be needed for the TLS-certificates.\nResponse-Headers # Header Description Example Content-Length integer 10 Content-Type text/plain; charset=utf-8 Response # 1675100403 This value would correspond to # Mon Jan 30 2023 17:40:03 GMT+0000 v1-ota (GET /v1/ota/%file-id%?cv=%file-ts%) # Updates several files within the box.\nResponses with HTTP 304 Not Modified if file is already up to date otherwise with the content of the file and a HTTP 200 OK.\nVariables # Variable Description Example file-id one-digit number (2-6) 3 file-ts unix-timestamp of the 1640950635 Files # File ID Name Description 2 PD-Firmware 3 EU-Firmware 4 Service Pack (cc3200/cc3235) 5 HTML 6 SFX v1-freshness-check (POST /v1/freshness-check) # Sends all Audio-IDs and UIDs of the content on box to the cloud in protobof. The result contains the UIDs of the files that should be marked hidden. In addition several settings (volume / skipping)\nRequest-Headers # Header Description Example Content-Length integer 400 Request-Protobuf # message TonieFreshnessCheckRequest { repeated TonieFCInfo tonie_infos = 1; } message TonieFCInfo { required fixed64 uid = 1; required fixed32 audio_id = 2; } Response-Headers # Header Description Example Content-Length integer 23 Content-Type application/octet-stream; charset=utf-8 Response-Protobuf # message TonieFreshnessCheckResponse { repeated fixed64 tonie_marked = 1; required int32 field2 = 2; required int32 max_vol_spk = 3; #0-3 required int32 slap_en = 4; #1=on, 0=off required int32 slap_dir = 5; #1=back-left_forw-right, 0=forw-left_back-right required int32 field6 = 6; required int32 max_vol_hdp = 7; #0-3 required int32 led = 8; #0=on, 1=off, 2=dimmed } v2-content (GET /v2/content/%uid-rev%) # Gets the content by uid and a password. If the content is know it sent back via HTTP 200 OK. The box may try to get a partial file. Then the answer is a HTTP 206 Partial Content (TODO).\nVariables # Variable Description Example uid-rev 8-Byte UID reversed 3e3a1aa3500304e0 content-pass Memory-content of the tag (32-byte hex) 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef Request-Headers # Header Description Example Authorization Contains the \u0026ldquo;password\u0026rdquo; for the content to download BD %content-pass% Response-Headers # Header Description Example Content-Length integer 23232 Content-Type binary/octet-stream v1-claim (GET /v1/claim/%uid-rev%) # Variables # Variable Description Example uid-rev 8-Byte UID reversed 3e3a1aa3500304e0 content-pass Memory-content of the tag (32-byte hex) 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef Request-Headers # Header Description Example Authorization Contains the \u0026ldquo;password\u0026rdquo; for the content BD %content-pass% Response-Headers # Header Description Example Content-Length integer 0 rtnl.bxcl.de # Basics # The communication is based on a TLS stream and protobuf and is unidirectional towards boxine. It\u0026rsquo;s (nearly) identical to the output via UART.\nTool # RTNL Decoder\nBytes # AP SSID # SD Directory # Firmware version / Update # MAC # "},{"id":41,"href":"/docs/wiki/general/replacement-parts/","title":"Replacement parts","section":"General","content":" Replacement parts # Part Partnumber(s) Identification Details Source Battery NTC MF58 10kOhm 3950K Used to check the temparture of the batteries Battery NiMH 3x AA 3.6V Charging socket JACK-C-SMT-10A-RA(R) CONN PWR JACK 2.10MMX5.50MM SLDR digikey Power supply classic Plug 5.5x2.1mm (+inner side), 9V 1.5A Battery / speaker socket JST PH 2mm 3pin "},{"id":42,"href":"/docs/tools/teddycloud/setup/","title":"Setup","section":"teddyCloud","content":" teddyCloud Setup # Minimal teddyCloud version for this docu is release v0.6.0! Please ensure you are using that or a newer release.\nDocker hints # The docker container automatically generates the server certificates on first run. You can extract the certs/server/ca.der for your box after that.\nAn example docker-compose.yaml can be found within the docker subdir. Please beware that port 443 cannot be remapped and you cannot use a reverse proxy like nginx or traefik without passing through the TLS (complex, not recommended). The client certificate authentication needs to be done by teddyCloud. Also, there is no SNI. If you are using docker, you can use macvlan to give the teddyCloud container a dedicated IP address (recommended).\nPreparation # First of all, prepare your teddyCloud installation. On first run, teddyCloud generates its certificates. During the generation you cannot access the webinterface. This can take several minutes! Be sure you check the log output!\nPlease connect your Toniebox to your Wi-Fi and update its firmware. Many boxes are shipped with a production firmware that needs to be updated. Otherwise the box won\u0026rsquo;t work as it should. It is not necessary to connect the box to the mytonies app/account. Connect the box without the setup assistant.\nDevice specific preparation # Please check wether you got a Toniebox with a CC3200, CC3235 or ESP32 and continue with the following steps:\nDump CA and client certificates Flash the replacement CA DNS Test \u0026amp; Troubleshooting # If you have problems with teddyCloud or just want to be sure everything works as it should, please check our Test \u0026amp; Troubleshooting site.\nAdditional # WebGui # Currently the teddyCloud webinterface is reachable through the IP of the docker container at port 80 (depending on your docker-compose.yaml). To reach the Webinterface with https the port 8443 (depending on your docker-compose.yaml) is used (for example if you want to flash your box). The default https port 443 is usally exclusive for the toniebox connection.\nChanges affecting the toniebox (volume, LED) which are made through this interface will only be reflected onto the toniebox after pressing the big ear for a few seconds until a beep occurs (freshnessCheck).\nContent (Legacy) # Please put your content into the /data/content/default/ in the same structure as on your toniebox. You can edit 500304E0.json file besides the content files to mark them as live or you can prevent the usage of the Boxine cloud for that tag with the nocloud parameter. By setting a source teddyCloud can stream any content that ffmpeg can decode (urls and files). Please check that the file and folders are in upper case. If not rename them, otherwise teddyCloud won\u0026rsquo;t serve them to the box!\n"},{"id":43,"href":"/docs/tools/teddycloud/setup/supported-server-hardware/","title":"Supported NAS/Server hardware","section":"Setup","content":" Supported NAS/Server hardware # Teddycloud is supported on nearly all servers utilizing the x86_64, arm64, and armhf (linux/arm/v7) architectures, as Docker containers are available for these platforms. Below is a compilation of NAS/server hardware that has been successfully utilized to host teddyCloud:\nNAS / Server hardware Limitations Raspberry Pi 5 - Raspberry Pi 4 - Raspberry Pi 3 Model B Rev 1.2. Having 3 or more docker container runing same time, could lead into crash (depend on containers task load e.g. jellyfin). Having teddycloud container runing alone, never was an issue Raspberry Pi Zero 2 slow on initial startup (expect 20 minutes and more for initial certificate creation!), encoding also very slow, possible crashes in some situations, but in general usable Synology NAS DS923+ (DSM 7.2.1) - Raspberry Pi Zero Docker installation is a little bit tricky, getting it running could take some extra steps see https://forum.revvox.de/t/hardware-requirements-does-teddycloud-run-on-a-raspberry-zero-1st-gen/309 Raspberry Pi 1 Model A Rev 1.1 Works with Raspberry Pi OS (32-Bit) and the teddycloud build for Alpine Linux (see https://github.com/toniebox-reverse-engineering/teddycloud/issues/225) Qnap TS-462 (QTS 5.2.3.3006) Works out of the box in Container Station Proxmox on Dell Wyse 5070 Works out of the box with Proxmox VE Helper Script. Needs some time till you can access the ip address. \u0026hellip; Consider using Alpine container instead of Ubuntu / Debian container if your server has limited resources.\nIf you\u0026rsquo;re utilizing alternative NAS/server hardware configurations, your contribution is welcome. Feel free to share your experience and insights with the community.\nTested Hardware, but not supporting teddyCloud # NAS / Server hardware Comment/Discussion/Links \u0026hellip; If you\u0026rsquo;ve attempted to deploy teddyCloud on specialized hardware without success, we encourage you to share your experience for community contribution. Conversely, if you\u0026rsquo;ve successfully implemented teddyCloud on any of the mentioned hardware platforms, we invite you to document your process on our forum. Additionally, you\u0026rsquo;re welcome to transition your system to one of the officially supported configurations.\n"},{"id":44,"href":"/docs/tools/teddybench/","title":"teddyBench","section":"Tools","content":" teddyBench # With this tool you can dump existing files of the famous audio box or create custom ones.\nLinks # GitHub Releases "},{"id":45,"href":"/docs/custom-firmware/esp32/teddybox/","title":"TeddyBox CFW","section":"ESP32","content":" TeddyBox Custom Firmware for ESP32 # Still in development!\nLinks # GitHub Releases "},{"id":46,"href":"/docs/tools/teddycloud/","title":"teddyCloud","section":"Tools","content":" teddyCloud # Features # teddyCloud is an alternative server for your Toniebox, allowing you to host the cloud services locally. This gives you the control about which data is sent to the original manufacturer\u0026rsquo;s cloud and allows you to host your own figurine audio files on e.g. your NAS or any other server. It provides an easy to use WebGui.\nYou can also use teddyCloud on the command line to manipulate esp32 firmware dumps or encode Tonie Audio Files (TAFs). See toniecloud --help.\nLinks # GitHub Releases "},{"id":47,"href":"/docs/tools/teddycloud/setup/test-troubleshooting/","title":"Test \u0026 Troubleshooting","section":"Setup","content":" teddyCloud - Test \u0026amp; Troubleshooting # Connection toniebox to teddyCloud # First of all please be sure the cloud is not enabled in the webinterface. Then close all browser windows to teddyClouds webinterface and open the logs of teddyCloud. If you are using docker you can access them via: docker logs teddycloud.\nTo be sure your toniebox can connect to teddyCloud we do a so called \u0026ldquo;freshnessCheck\u0026rdquo;. This can be initiated by pressing one ear of the box until the LED is pulsing blue.\nError: Codeword turtle (Schildkröte) # If the box is flashing red and shouts the codeword turtle, be sure teddyCloud is running and the box can connect to your cloud. Check the DNS step.\nError: Codeword owl (Eule) # If the box is flashing red and shouts the codeword owl, be sure teddyClouds certs/server/ca.der is identical to the one on box. Please check the Flash replacement CA step.\nSometimes you\u0026rsquo;ll need to regenerate teddyClouds certificates as it may be defective. For that delete all files in certs/server/ca.der and restart teddyCloud. We had the case that an esp32 based box worked with the certificate, but the cc3200 based one had trouble. After regenerating the certificates it was fine.\nThis error can also happen if the box tries to reach the boxine cloud. Check the DNS step.\nAlternativly you may use a reverse proxy like nginx or traefik between teddyCloud and your box. This is not supported, teddyCloud needs its own dedicated IP address.\nExample log output:\nINFO |server.c:0574:server_init()| 1 open HTTPS connections INFO |server.c:0574:server_init()| 0 open HTTPS connections Connection teddyCloud to boxine cloud # Please visit http://\u0026lt;teddyCloud\u0026gt;/v1/time and check the logs. You should see a number which is the current unixtime. The logs should look like that:\nINFO |handler_cloud.c:0038:handleCloudTime()| \u0026gt;\u0026gt; respond with current time INFO |mqtt.c:0684:mqtt_init_box()| Skipping client \u0026#39;Toniebox\u0026#39; (cn: \u0026#39;default\u0026#39;) Please visit the webinterface and enable Cloud enabled and Forward 'time. Then visit http://\u0026lt;teddyCloud\u0026gt;/v1/time again and check the logs. You should see the time again and following log:\nLog is fine # INFO |mqtt.c:0684:mqtt_init_box()| Skipping client \u0026#39;Toniebox\u0026#39; (cn: \u0026#39;default\u0026#39;) INFO |cloud_request.c:0158:web_request()| Connecting to HTTP server prod.de.tbs.toys:443... INFO |cloud_request.c:0208:web_request()| trying IP: 18.156.186.144 INFO |cloud_request.c:0036:httpClientTlsInitCallbackBase()| Initializing TLS... INFO |cloud_request.c:0071:httpClientTlsInitCallbackBase()| Initializing TLS done INFO |cloud_request.c:0308:web_request()| HTTP code: 200 INFO |handler.c:0056:cbrCloudHeaderPassthrough()| \u0026gt;\u0026gt; cbrCloudHeaderPassthrough: Server = openresty INFO |handler.c:0056:cbrCloudHeaderPassthrough()| \u0026gt;\u0026gt; cbrCloudHeaderPassthrough: Date = Sat, 26 Jan 2024 18:48:23 GMT INFO |handler.c:0056:cbrCloudHeaderPassthrough()| \u0026gt;\u0026gt; cbrCloudHeaderPassthrough: Content-Type = text/plain; charset=utf-8 INFO |cloud_request.c:0339:web_request()| Content-Type is text/plain; charset=utf-8 INFO |handler.c:0056:cbrCloudHeaderPassthrough()| \u0026gt;\u0026gt; cbrCloudHeaderPassthrough: Content-Length = 10 [...] INFO |handler.c:0061:cbrCloudHeaderPassthrough()| \u0026gt;\u0026gt; cbrCloudHeaderPassthrough: NULL INFO |cloud_request.c:0386:web_request()| Response: \u0026#39;1706384903\u0026#39; INFO |handler.c:0225:cbrCloudServerDiscoPassthrough()| \u0026gt;\u0026gt; cbrCloudServerDiscoPassthrough INFO |cloud_request.c:0417:web_request()| Connection closed Error case - Missing client certificates # INFO |handler_cloud.c:0038:handleCloudTime()| \u0026gt;\u0026gt; respond with current time INFO |mqtt.c:0684:mqtt_init_box()| Skipping client \u0026#39;Toniebox\u0026#39; (cn: \u0026#39;default\u0026#39;) INFO |cloud_request.c:0158:web_request()| Connecting to HTTP server prod.de.tbs.toys:443... INFO |cloud_request.c:0208:web_request()| trying IP: 3.69.182.181 INFO |cloud_request.c:0036:httpClientTlsInitCallbackBase()| Initializing TLS... ERROR|cloud_request.c:0218:web_request()| Failed to connect to HTTP server! Error=2 Please check your client certificates from the dump CA and client certificates step.\nError case - prod.de.tbs.toys is resolved to teddyCloud # INFO |cloud_request.c:0158:web_request| Connecting to HTTP server prod.de.tbs.toys:443... INFO |cloud_request.c:0208:web_request| trying IP: 192.168.xxx.xxx INFO |cloud_request.c:0036:httpClientTlsInitCallbackBase| Initializing TLS... INFO |cloud_request.c:0071:httpClientTlsInitCallbackBase| Initializing TLS done ERROR|cloud_request.c:0218:web_request| Failed to connect to HTTP server! Error=537 INFO |handler_cloud.c:0692:handleCloudFreshnessCheck| Freshness check response: size=14, content=\u0010 WARN |tls_server_fsm.c:0260:tlsPerformServerHandshake| TLS handshake failure! Please check if prod.de.tbs.toys and rtnl.bxcl.de are resolved to your teddyCloud instance within its own container. Please either give your Toniebox a custom DNS that resolved them to teddyCloud or the teddyCloud instance a DNS that does not tamper the urls.\n"},{"id":48,"href":"/docs/tools/teddycloud/tecdoc/toniesboxes-custom-json/","title":"tonieboxes-custom-json","section":"Technical Docs","content":" tonieboxes.custom.json # teddyCloud uses the tonieboxes-custom-json file to read the metadata of customized tonieboxes in the same manner it\u0026rsquo;s done for the official boxine tonieboxes in the tonieboxes-json file. The structure is the same, but it\u0026rsquo;s not overwritten as the tonieboxes-json file through possible updates. So you can use the tonieboxes-custom-json to save metadata of your own customized Tonieboxes.\nInitially the tonieboxes-custom-json file looks like the following:\n[] After adding the meta information of your customized Toniebox the tonieboxes-custom-json file looks like this (more details see below in section Specification):\n[{ \u0026#34;id\u0026#34;: \u0026#34;11-0001\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Customized Toniebox Teddycloud Limited Edition\u0026#34;, \u0026#34;img_src\u0026#34;: \u0026#34;http://teddycloud.local/customToniebox.png\u0026#34;, \u0026#34;crop\u0026#34;: [ 0, 0, 1 ] }] This results after restart of teddyCloud in the following changed appearance in the GUI:\nEdit Box model modal:\nToniebox Card:\nSpecification # The tonieboxes-custom-json file uses the JSON Array Structure. It contains zero, one, or more ordered elements, separated by a comma. The JSON array is surrounded by square brackets [ ].\nEach element consists of a JSON object with the following keys:\nOption Example value Description id \u0026quot;11-0001\u0026quot; Model number (must be not one of the existing model numbers! name \u0026quot;Customized...\u0026quot; Name of the customized Toniebox img_src \u0026quot;http://.../customToniebox.png\u0026quot; url of the picture which shall be shown as customized Toniebox image in the GUI crop [0,0,1] Array of 3 elements: [x, y, scale] with x and y as Image shift in x / y direction, scale as factor for scaling the image. Try the correct values till the image has the right size and it\u0026rsquo;s placed correctly. "},{"id":49,"href":"/docs/tools/teddycloud/tecdoc/tonies-custom-json/","title":"tonies.custom.json config","section":"Technical Docs","content":" tonies.custom.json # teddyCloud uses the tonies.custom.json file from config folder to read the metadata of custom tags in the same manner it\u0026rsquo;s done for the official boxine tonies in the tonies.json file. The structure is the same, but it\u0026rsquo;s not overwritten as the tonies.json file through regularly updates. So you can use the tonies.custom.json to save metadata of your own custom tags.\nYou can generate the required JSON data via teddyCloud GUI (Edit Tag / Create new model) and save it in the tonies.custom.json file, or you can generate it manually, as described below.\nInitially the tonies.custom.json file looks like the following:\n[] In the GUI, a custom tag looks initially like:\nEnriched with metadata for the above shown custom tag the tonies.custom.json file looks like this (more details see below in section Specification):\n[{\u0026#34;no\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;model\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;audio_id\u0026#34;: [\u0026#34;369519776\u0026#34;], \u0026#34;hash\u0026#34;: [\u0026#34;af9e61a9c1b12138fb060908d595742334b04515\u0026#34;], \u0026#34;title\u0026#34;: \u0026#34;Custom Tonie Example Title\u0026#34;, \u0026#34;series\u0026#34;: \u0026#34;Custom Tonies\u0026#34;, \u0026#34;episodes\u0026#34;: \u0026#34;This is my custom tonie\u0026#34;, \u0026#34;tracks\u0026#34;: [\u0026#34;Title 1\u0026#34;, \u0026#34;Title 2\u0026#34;, \u0026#34;Title 3\u0026#34;, \u0026#34;Title 4\u0026#34;, \u0026#34;Title 5\u0026#34;, \u0026#34;Title 6\u0026#34;, \u0026#34;Title 7\u0026#34;, \u0026#34;Title 8\u0026#34;, \u0026#34;Title 9\u0026#34;, \u0026#34;Title 10\u0026#34;], \u0026#34;release\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;de-de\u0026#34;, \u0026#34;category\u0026#34;: \u0026#34;custom\u0026#34;, \u0026#34;pic\u0026#34;: \u0026#34;https://upload.wikimedia.org/wikipedia/en/6/6b/Hello_Web_Series_%28Wordmark%29_Logo.png\u0026#34;}] Note: After you changed the tonies.custom.json file you need to reload it via teddyCloud GUI ( Settings / Reload Tonies.json ) or restart the server.\nThis results after reloading of the tonies.custom.json file in the following changed appearance in the GUI:\nSpecification # The tonies.custom.json file uses the JSON Array Structure. It contains zero, one, or more ordered elements, separated by a comma. The JSON array is surrounded by square brackets [ ].\nEach element consists of a JSON object with the following keys:\nOption Example value Description no \u0026quot;0\u0026quot; Number of custom tag model \u0026quot;123456\u0026quot; A model number of the custom tag audio_id [\u0026quot;369519776\u0026quot;] Enter the custom audio ID of the custom tag. Can be found in GUI as shown below hash [\u0026quot;af9e6..b04515\u0026quot;] Enter the hash of the custom tag. Can be found in the GUI as shown below title \u0026quot;Custom Tonie Example Title\u0026quot; Enter the title of the custom tag, it\u0026rsquo;s currently not displayed, use the series and episode tag to give your custom tag a title which is shown in the GUI series \u0026quot;Custom Tonie\u0026quot; Enter the Series of the custom tag, will be shown in the GUI episodes \u0026quot;This is my custom tonie\u0026quot; Enter the Episode of the custom tag, will be shown in the GUI tracks [\u0026quot;Title 1\u0026quot;, \u0026quot;Title 2\u0026quot;] Enter the tracks of the custom tag, will be shown in the GUI release \u0026quot;0\u0026quot; currently unused language \u0026quot;de-de\u0026quot; language code, will be shown in the gui if it\u0026rsquo;s another language than the dominant one category \u0026quot;custom\u0026quot; category of the custom tag, currently unused pic \u0026quot;https://.../Logo.png\u0026quot; url of the picture which shall be shown as custom tag image in the GUI. In case of use of the custom image folder the path should be relative, like \u0026ldquo;/custom_img/Logo.png\u0026rdquo;. How to get the Audio ID and the Hash value of a TAF # Navigate to the taf file in the library (or content if library is not enabled) and double click on the row. A modal will be shown which contains the information:\n"},{"id":50,"href":"/docs/wiki/general/traffic-sniffing/","title":"Traffic sniffing","section":"General","content":" Summary # The toniebox communicates over https with its servers. It uses its Certificate Authority certifcate (flash:/cert/ca.der) to verify the tls connection. The box authenticates itself with a client certificate (flash:/cert/client.der) + private rsa key (flash:/cert/private.der). The communication is based on https and protobuf.\nKnown domains # prod.de.tbs.toys rtnl.bxcl.de Attention! # Your certificate may be banned if you send to many wrong requests to the Boxine servers.\nUsing mitmproxy # The Toniebox can be man-in-the-middled by replacing the CA of the box with one you can control. You need to use mitmproxy v8.0.0 and use the mitmproxy-validity addon. You should prepare a system for transparent proxing with mitmproxy. The easiest way in my opinion to use an VM and set up the DHCP for the WiFi the way that the Toniebox gets the VM as gateway.\nDon\u0026rsquo;t use the latest mitmproxy # Don\u0026rsquo;t use mitmproxy v9 as it doesn\u0026rsquo;t support the needed sha-1 signature algoritms! Stick to 8.0.0 until further notice!\n(OpenSSL Error([(\u0026#39;SSL routines\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;no shared signature algorithms\u0026#39;)])) Create CA # mitmproxy creates its CA on first run (/root/.mitmproxy/). I suggest to start it with the tool faketime or change your systems date to 2015-11-04. (It may work without, but no warranty) Don\u0026rsquo;t forget to run it as root.\nConversion to DER-format # Afterwards you need convert the mitmproxy-ca-cert.cer into the DER-format\nopenssl x509 -inform PEM -outform DER -in mitmproxy-ca-cert.cer -out mitmproxy-ca-cert.der Backup original files # Afterwards you\u0026rsquo;ll need to backup the Toniebox\u0026rsquo; CA and its client.der/private.der\ncc3200tool read_file /cert/ca.der ca.der read_file /cert/client.der client.der read_file /cert/private.der private.der Upload mitmproxy CA to the Toniebox # cc3200tool write_file mitmproxy-ca-cert.der /cert/ca.der Convert client certificate to PEM-format # openssl x509 -inform DER -outform PEM -in client.der -out client.cer openssl rsa -inform DER -outform PEM -in private.der -out private.key cat client.cer private.key \u0026gt; client.pem Dump SSL-keys # I suggest you to set the SSLKEYLOGFILE enviroment variable so you can record your traffic with Wireshark and decrypt it afterwards (Edit-Preferences-Protocols-TLS-(Pre)-Master-Secret log filename)\nexport SSLKEYLOGFILE=/root/keylogfile.txt Run mitmproxy / mitmweb / mitmdump # You can use mitmproxy, mitmweb or mitmdump. I prefered mitmweb\n./mitmweb --verbose --web-host 0.0.0. --mode transparent --set client_certs=/root/client.pem --ssl-insecure -s /root/toniebox.cert-validity.py Using wireshark over ssh # You\u0026rsquo;ll need to install tcpdump on you target system. I also disabled password auth for sudoing tcpdump.\n$ nano /etc/sudoers.d/tcpdump %pcap ALL=NOPASSWD: /usr/bin/tcpdump Attach pcap-group to tcpdump\nsudo chgrp pcap /usr/bin/tcpdump sudo chmod 750 /usr/bin/tcpdump I suggest you to ssh once into your machine to confirm the signature. Then you can run wireshark over the command and then enter the password to start tcpdump\nssh user@hackiebox sudo tcpdump -i ens19 -U -s0 -w - \u0026#39;not port 22\u0026#39; | wireshark -k -i - Certificates helpers (just for legacy reasons!) # Certificate conversion # To use the certificates and the rsa key with most tools you will need to convert it from DER to PEM\nopenssl x509 -inform DER -outform PEM -in ca.der -out ca.cer openssl x509 -inform DER -outform PEM -in client.der -out client.cer openssl rsa -inform DER -outform PEM -in private.der -out private.key Generate self signed root CA # openssl genrsa -out ca.key 4096 faketime \u0026#39;2015-11-04 00:00:00\u0026#39; openssl req -new -x509 -key ca.key -out ca.cer -days 9000 -subj \u0026#39;/C=DE/ST=NW/L=Duesseldorf/O=Boxine GmbH/CN=Boxine CA\u0026#39; Generate domains certificates # openssl req -new -key ca.key -out rtnl.bxcl.de.req -subj \u0026#39;/C=DE/ST=NW/L=Duesseldorf/O=Boxine GmbH/CN=rtnl.bxcl.de\u0026#39; openssl req -new -key ca.key -out prod.de.tbs.toys.req -subj \u0026#39;/C=DE/ST=NW/L=Duesseldorf/O=Boxine GmbH/CN=prod.de.tbs.toys\u0026#39; faketime \u0026#39;2015-11-05 00:00:00\u0026#39; openssl x509 -req -in rtnl.bxcl.de.req -CA ca.cer -CAkey ca.key -set_serial 101 -days 10950 -outform PEM -out rtnl.bxcl.de.cer faketime \u0026#39;2015-11-05 00:00:00\u0026#39; openssl x509 -req -in prod.de.tbs.toys.req -CA ca.cer -CAkey ca.key -set_serial 101 -days 10950 -outform PEM -out prod.de.tbs.toys.cer Generate client certificate # openssl genrsa -out private.key 2048 openssl req -utf8 -new -key private.key -out client.req -subj \u0026#39;/C=DE/ST=NRW/L=Düsseldorf/O=Boxine GmbH\u0026#39; openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial 101 -extensions client -days 10950 -outform PEM -out client.cer Certificate conversion # To use your generated certificates/ley for the toniebox you will have to convert it back to DER format.\nopenssl x509 -inform PEM -outform DER -in ca.cer -out ca.der openssl x509 -inform PEM -outform DER -in client.cer -out client.der openssl rsa -inform PEM -outform DER -in private.key -out private.der Certificate upload # cc3200tool -p COM6 write_file z:\\fakessl\\box_fake\\client.der /cert/client.der write_file z:\\fakessl\\box_fake\\private.der /cert/private.der write_file z:\\fakessl\\fake\\ca.der /cert/ca.der Concat certificates to PEM # cat ca.key ca.cer \u0026gt; ca.pem cat ca.key rtnl.bxcl.de.cer \u0026gt; rtnl.bxcl.de.pem cat ca.key prod.de.tbs.toys.cer \u0026gt; prod.de.tbs.toys.pem "},{"id":51,"href":"/docs/wiki/general/useful-links/","title":"Useful links","section":"General","content":" Link Description https://media.ccc.de/v/37c3-11993-toniebox_reverse_engineering Toniebox Reverse Engineering Video by Team RevvoX https://media.ccc.de/v/36c3-108-hacking-an-nfc-toy-with-the-chameleonmini Using the Chameleonmin to hack the Toniebox Video https://forum.revvox.de/t/ultimate-noob-guide/98 Detailed Guide to use teddy and teddycloud "},{"id":52,"href":"/docs/wiki/","title":"Wiki","section":"Docs","content":"Welcome to the toniebox wiki!\nThis wiki contains all toniebox related information we gathered.\nAttention, do not edit the wiki directly. It is generated automatically from the master branch!\nThe wiki of the custom firmware is found here.\n"}]