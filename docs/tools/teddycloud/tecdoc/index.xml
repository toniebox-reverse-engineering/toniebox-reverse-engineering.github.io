<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical Docs on Toniebox Hacking</title><link>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/</link><description>Recent content in Technical Docs on Toniebox Hacking</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/index.xml" rel="self" type="application/rss+xml"/><item><title>content-json config</title><link>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/content-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/content-json/</guid><description>content.json # Toniecloud uses the content-json file to save some data and control the behaviour of a tag. Its name equal to the TAFs name but with a json file ending like 500304E0.json. This file sits alongside the actual audio content.
Usually it looks like the following:
{ &amp;#34;live&amp;#34;: false, &amp;#34;nocloud&amp;#34;: false, &amp;#34;source&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;skip_seconds&amp;#34;: 0, &amp;#34;cache&amp;#34;: false, &amp;#34;cloud_ruid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;cloud_auth&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;cloud_override&amp;#34;: false, &amp;#34;tonie_model&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;_version&amp;#34;: 5 } Specification # Option Type Default Description live bool false Always start the content from the beginning and redownload its content nocloud bool false Do not sync the TAF with the boxine cloud source str &amp;quot;&amp;quot; Use this TAF as content or convert this file into a TAF, when the box requests content (everything ffmpeg can decode, files or urls for webradio) skip_seconds uint32 0 Skips the audio by given seconds (source) cache bool false Do not delete the TAF converted via source after sending it cloud_ruid str &amp;quot;&amp;quot; rUID of the Tonie.</description></item><item><title>Edit JSON files with vscode</title><link>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/edit-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/edit-local/</guid><description>Edit JSON files with vscode # You can use a json schema which can provide you the ability for autocompletion and validation in your favorite editor. This article describes it for vscode.
Schemas:
content-json-schema.json tonies-custom-json-schema.json tonieboxes-custom-json-schema.json plalist-tap-json-schema.json content.json # Add the Schemaurl to the json file.
Example:
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://tonies-wiki.revvox.deteddyCloud/tecdoc/content-json-schema.json&amp;#34;, &amp;#34;live&amp;#34;: false, &amp;#34;nocloud&amp;#34;: false, &amp;#34;source&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;skip_seconds&amp;#34;: 0, &amp;#34;cache&amp;#34;: false, &amp;#34;cloud_ruid&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;cloud_auth&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;cloud_override&amp;#34;: false, &amp;#34;tonie_model&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;_version&amp;#34;: 5 } tonies.</description></item><item><title>Playlists (TAP)</title><link>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/playlist-tap-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/playlist-tap-json/</guid><description>Playlist Feature (TAP files) # teddyCloud supports basic playlist handling. A playlist file (TAP) can be linked to multiple sources, as long as it is supported by ffmpeg. Please be aware: If you are adding TAF files, the chapters of them will get lost in the TAP!
TAP files can be placed into library folder. The Tonies (from content folder) can then get assigned to any TAP file, just like it would be a normal TAF.</description></item><item><title>tonieboxes-custom-json</title><link>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/toniesboxes-custom-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/toniesboxes-custom-json/</guid><description>tonieboxes.custom.json # teddyCloud uses the tonieboxes-custom-json file to read the metadata of customized tonieboxes in the same manner it&amp;rsquo;s done for the official boxine tonieboxes in the tonieboxes-json file. The structure is the same, but it&amp;rsquo;s not overwritten as the tonieboxes-json file through possible updates. So you can use the tonieboxes-custom-json to save metadata of your own customized Tonieboxes.
Initially the tonieboxes-custom-json file looks like the following:
[] After adding the meta information of your customized Toniebox the tonieboxes-custom-json file looks like this (more details see below in section Specification):</description></item><item><title>tonies.custom.json config</title><link>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/tonies-custom-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tonies-wiki.revvox.de/docs/tools/teddycloud/tecdoc/tonies-custom-json/</guid><description>tonies.custom.json # teddyCloud uses the tonies.custom.json file from config folder to read the metadata of custom tags in the same manner it&amp;rsquo;s done for the official boxine tonies in the tonies.json file. The structure is the same, but it&amp;rsquo;s not overwritten as the tonies.json file through regularly updates. So you can use the tonies.custom.json to save metadata of your own custom tags.
Initially the tonies.custom.json file looks like the following:</description></item></channel></rss>